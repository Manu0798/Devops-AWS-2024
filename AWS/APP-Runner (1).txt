# What is App Runner
-> AWS App Runner is a fully managed, fast, simple and cost-effective service that enables you to securely deploy source code or container images. This service will automatically handle the resource configuration, load balancer, autoscaling and monitoring.

-> Scalability
   Scale up or down easily
   configure number of provisioned instnaces
   configure the max load an instance handles
-> Security 
   Include fully managed TLS with no setup required
   Amazon Cloudwatch integration
-> Simplifies the process of deploying a new version of your code(github) or images(Amazon elasic container registry)
-> Automate deployment each time a commit is pushed to the code repository or a new container image version is pushed to the image repository
-> App Runner is accessible via CLI,API,Console and SDK

# What are the Benefits 
-> Its Easy
-> Scalability
-> Cost Effective

# Features of APP runner
-> Autoscaling
-> Deployment
-> Observability  [observability means to cover logs and metrics]
-> Others

# Three types of logs
-> Deployment log   [Build out logs]
-> Application logs [Logs emitted by your web application]
-> Event logs [log of lifecycle operation executed by app runner during service creating and deployment]



# You will follow below three links to work on App runner
-> https://youtu.be/zbJnuArKAuY?si=LyThGFCpz1meDMWD
-> https://youtu.be/TKirecwhJ2c?si=8PT9BE7-yV3e045V
-> https://youtu.be/Muq3m0tzbQI?si=cE6LKCMB0SLUjGSt


# What Concurrnet requests
Concurrent requests refer to the number of requests a server or application can handle simultaneously at any given moment. When multiple users or systems interact with a service simultaneously, each interaction generates a request.

A Concurrent Request is a request that is being processed at the same time as other requests by a server or application.

In simple terms:

If 10 users send requests to a server at the same time, and the server starts processing all of them simultaneously, then there are 10 concurrent requests.
If the server processes one request at a time (sequentially), then there are zero concurrent requests (only one active request at a time).




Concurrent Request Capacity by Configuration
vCPU	Memory	Simple Workloads (Concurrent Requests)	Moderate Workloads (Concurrent Requests)	Heavy Workloads (Concurrent Requests)
0.25 vCPU	0.5 GB	25–50	10–25	5–10
0.25 vCPU	1 GB	50–75	20–35	10–15
0.5 vCPU	1 GB	75–100	35–50	15–25
0.5 vCPU	2 GB	100–150	50–75	25–40
1 vCPU	2 GB	150–200	75–100	40–60
1 vCPU	3 GB	200–300	100–150	60–80
2 vCPU	4 GB	300–500	150–250	80–120
2 vCPU	8 GB	500–750	250–400	120–200
4 vCPU	8 GB	750–1,000	400–600	200–300
4 vCPU	16 GB	1,000–1,500	600–900	300–500



Estimated Concurrent Requests for 1 vCPU + 4 GB RAM
Request Type	Average Latency	Estimated Concurrent Requests
Fast API calls (light processing, cache hits)	100ms	10-20
Database queries (moderate complexity)	250-500ms	5-10
CPU-intensive processing (image processing, AI inference)	1s	2-5

 



# To delete the VPC Connector, you must first detach it from the service.
-> aws apprunner update-service --service-arn arn:aws:apprunner:ap-south-1:796973481585:service/frissly-prod-backend/ed15d0135d22452db14e12487742eab3 --network-configuration "{""EgressConfiguration"": {""EgressType"": ""DEFAULT""}}"

-> aws apprunner describe-service \
  --service-arn arn:aws:apprunner:ap-south-1:796973481585:service/frissly-prod-backend/ed15d0135d22452db14e12487742eab3

-> aws apprunner delete-vpc-connector --vpc-connector-arn arn:aws:apprunner:ap-south-1:796973481585:vpcconnector/frissly-prod-vpc_connector/1/b04b646257b34985bf9639841e49eca2

