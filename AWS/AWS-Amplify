To attach the domain name frissly.com to your AWS Amplify app during the creation process, follow these steps:

Steps to Attach frissly.com During AWS Amplify App Creation
Step 1: Deploy Your Application to AWS Amplify
Go to the AWS Amplify Console.
Click on Get Started under "Host your web app."
Connect your repository (e.g., GitHub, Bitbucket, GitLab, or AWS CodeCommit) to Amplify and configure the build settings.
Deploy your application.
Step 2: Add Your Domain Name (frissly.com)
Once your app is deployed, you can attach your custom domain during the configuration process:

Navigate to Domain Management in the left menu of your Amplify app.
Click Add domain.
Step 3: Specify Your Domain Name
Enter your domain name as frissly.com.
Step 4: Set Up DNS Records
Depending on where your domain is registered, follow one of the methods below:

Option 1: If frissly.com Is Registered in Amazon Route 53
Amplify automatically detects the domain if itâ€™s in Route 53.
Select the domain and confirm.
AWS automatically updates the DNS settings in Route 53.
Option 2: If frissly.com Is Registered Elsewhere
AWS provides DNS records (such as CNAME or A records) that you need to configure with your domain registrar.
Log in to the management console of your domain registrar (e.g., GoDaddy, Namecheap).
Go to DNS Management and add the provided records:
CNAME Record: Point subdomains like www.frissly.com to the Amplify-provided domain.
A Record: If needed, point the root domain (frissly.com) to the Amplify-provided IP or domain name.
Step 5: Enable HTTPS (SSL Certificate)
AWS Amplify automatically provisions and manages an SSL certificate for your domain via AWS Certificate Manager (ACM):

SSL setup is initiated once you save the domain configuration.
The domain will automatically be served over HTTPS after verification.
Step 6: Test Your Domain
Access your app using both frissly.com and www.frissly.com to ensure proper configuration.
If you want to redirect frissly.com to www.frissly.com, you can set up redirects in the Amplify Domain Management section.
Common Issues and Troubleshooting
DNS Propagation Delay: DNS updates can take up to 48 hours to propagate globally.
SSL Errors: Ensure that the domain name is properly verified and DNS settings are correct.
Caching Issues: Clear browser cache if youâ€™re not seeing updates.
With these steps, your domain frissly.com will be properly attached to AWS Amplify, and your application will be live under your custom domain! ðŸŽ‰







To set up a GoDaddy domain name for an AWS Amplify application, follow these steps:

Step 1: Add a Custom Domain in AWS Amplify
Open AWS Amplify Console

Go to the AWS Amplify Console.
Select your Amplify App.
Add a Custom Domain

Navigate to App settings > Domain management.
Click Add domain.
Enter your GoDaddy domain name (e.g., example.com).
Click Configure domain.
Select Subdomains (Optional)

Choose the subdomains you want to use (e.g., www.example.com, api.example.com).
Click Save.
Step 2: Update DNS Records in GoDaddy
Log in to GoDaddy

Go to GoDaddy Domain Manager.
Find Your Domain

Click on your domain name.
Go to DNS Management.
Add Required DNS Records
AWS Amplify provides CNAME and A record details for domain verification. You need to add them in GoDaddy.

CNAME Record for Subdomains (www, etc.):

Type: CNAME
Host: www (or your subdomain)
Value: The CNAME value provided by AWS Amplify.
A Record for Root Domain (example.com):

Type: A
Host: @
Value: The IP addresses provided by AWS Amplify.
Alternate (if AWS provides an ALIAS Record):

In GoDaddy, you might need to use Forwarding instead of an A record for root domains.
Go to Forwarding and redirect example.com to www.example.com.
Step 3: Verify the Domain in AWS Amplify
Return to AWS Amplify Console.
Click Verify or Save and Deploy.
Wait for AWS to detect the new DNS settings (this may take a few minutes to a few hours).
Step 4: Enable HTTPS (SSL)
AWS Amplify automatically provisions an SSL certificate.
Once the domain is verified, it will be secured with HTTPS.
Troubleshooting Tips
Propagation Delay: DNS changes can take up to 24-48 hours.
Clear Cache: Try clearing your browser cache if the changes donâ€™t reflect.
Check GoDaddy DNS Settings: Ensure that no conflicting records exist.
Let me know if you need more help! ðŸš€


# How to attach the aws amplify URL to domain name in route53
-> After you deploy the application, go to the custom domains, click add domain, enter the domain name, Click manual configuration
-> Enable this "Setup redirect from https://origina.ni to https://www.origina.ni"
-> Click "Amplify managed certificate"
-> It will give some hostnames, and URL, you will add those three hostnames in route 53
-> Go to route53, clikc hostname, click the domain name, create the record, give hostname at record name place, choose type, and give URL
-> After add three hostnames come to Amplify it will take some time create SSL and Active the domain name.







# Admin-ui

version: 1
frontend:
  phases:
    preBuild:
      commands:
        - npm install
    build:
      commands:
        - npm run build
  artifacts:
    baseDirectory: dist
    files:
      - '**/*'
  cache:
    paths:
      - node_modules/**/*


# Delivery app

version: 1
frontend:
  phases:
    preBuild:
      commands:
        - echo "Setting up Node.js..."
        - nvm install 20  # Change this to 22 if your project supports it
        - nvm use 20
        - node -v
        - npm -v
        - corepack enable
        - npm install -g npm@latest  # Ensure latest npm version
        - npm install --silent --global expo-cli
        - npm ci --cache .npm --prefer-offline || npm install
        - |
          if [ -f yarn.lock ]; then
            yarn install --frozen-lockfile || exit 1
          elif [ -f package-lock.json ] || [ -f npm-shrinkwrap.json ]; then
            npm ci --cache .npm --prefer-offline || npm install
          else
            npm install || exit 1
          fi
    build:
      commands:
        - echo "Starting build process..."
        - ls -la  # Debug: List project files
        - npm run build || { echo "Build failed"; exit 1; } # Adjust for your framework (React, Expo, etc.)
  artifacts:
    baseDirectory: dist  # Modify based on your output directory
    files:
      - '**/*'
  cache:
    paths:
      - .npm/**/*
      - $(npm root --global)/**/*

