# What is lambda
-> It is a serverless computing service. serverless means AWS will take care the total infrastructure
-> We can use event based trigger

# What is the difference between EC2 and Lambda
# Ec2
-> It is a server computing service. servermeans user can take care the total infrastructure
-> You have to pay money untill instance running
-> You have to install what software you need
-> user can host the complete application

#Lambda
-> It is a serverless computing service. serverless means AWS will take care the total infrastructure
-> You need to pay money upto function run and memory consume
-> Lambda will install the all softwares
-> Only piece of code

# Advantages of Lambda
-> No server setup
-> No Start or Stop
-> No Additional Cost
-> Serverless
-> No maintaince
-> Pay as you use
-> High availablity
-> Scaliablity
-> Monitoring the logs

Note: [Benifits of lambda]
-> Lambda maximum time limit = 15min [If you want you will increase]
-> memory = 128MB to 10240MB
-> Monthly 1 million requets free
-> Monthly 400000GB we can use freely [If you want morethan this you have to pay]
-> You can add only upto 50 MB data in lambda

Note:- 15min executable time code we can execute in lambda. Morethan 15min time code we wont execute in lambda then we have to use virtual machines or containers.
       We can edit only python and Nodeja applications in lambda. we wont edit other application like java, react ..etc
       

# Lambda Pricing
-> You pay only for what you use. you are charged based on number of requests for your function and duration.

# Lambda Concurrency
-> Concurrency is the number of request that your function is serving at any given time
-> When your function is invoked. Lambda allocated an instance of it to process that event.
-> When the function code finishes running, it can handle another request.

# How to create lambda
-> Go to lambad and create the function
-> select Author from scratch
-> Give the function name
-> Click python 3.8
-> Click the default execution role
-> Click new role with basic lambda permission
-> VPC is optional 
-> Create

# What is layers
-> Depedices in called layers in lambda
-> if you want to use particular code to all the lambda functions then you will keep that in layers
-> We can add only 5 layers
-> Allow the lambda inline editing upto 3MB
-> All reference keep in layres. we can communicate anything by that reference


# Running Notes
-> You should create the event to run the lambda function
-> Go to test and create event and click test
-> If you want to add Any MB, go to configuration and click general configuration and click edit
-> You can edit the code to laterst version in lambda but we cant edit lambda old version code
-> ARN:- Amazon resource name

https://youtu.be/XFGSuj83wdc?si=TeAQ16QRZiZUGgSw

# How to trigger the services to lambda
-> we will trigger the services to run lambda backend code
-> If you want to stop your code some time you will click 'Throttle'
-> Click trigger, click API, create API, security is open, create
-> Then you will create the endpoint by that endpoint we can invoke the application
-> Copy the endpoint link and paste the link browser

# How to trigger S3 bucket to lambda
-> Create the one lambda function as like before
-> After create the function. click function come to configuration and click general configuration
-> Edit and click create role and add s3 bucket full access.
 

# What is an API
-> API stands application programming interface which helps us to establish communication between two diffenent applications

# How to work with versions and Alias
-> Create one lambda function 
-> After create the lambda and go to API gateway and click rest API build, give API name and create API
-> Create the resource and give name dev resource
-> create the method click GET, click function ARN.
-> Click deploy API, Click resource you will get Invoke URL
-> You will check once lambda configuration wheather API is trigger or not

# why we are using versions
-> would you create lambda and trigger API gateway to lambda. After give API gateway endpoint to client. After few days if client will ask you
-> I want some changes from that code without distribud existing code.
-> Then what would you do. First you will create one version using with existing code
-> Go to versions and create one publish new version with past code
-> Go to the API gateway and create resource and create method and give version ARN in that method and create method
-> After complete the above process. you will go to lambda and changes that code as you need
-> You will follow below youtube link to get the full information
  https://youtu.be/JO5B4tPutzI?si=gEZ0onfLij1qZhqU  



https://youtu.be/sBkoT6_xK1Q?si=KzwQ_uwJu3-R4EpR



# How to take mongoDB backup by using AWS lambda
-> First you have to create Atlas public and private key
-> go to organzations, click Access manager, click application, add API key, give Organization Owner, Organization Member these permissions, create
-> https://cloud.mongodb.com/v2/67694dc86d55bd55a0dd81ca#/clusters     --> Get Group ID from URL   This is the group ID -> 67694dc86d55bd55a0dd81ca
-> You have to create the one lambda with python
-> Copy the below code in that console

import json
import requests
import boto3
import time
from datetime import datetime

# MongoDB Atlas API Keys
ATLAS_PUBLIC_KEY = "yuhrwkxc"
ATLAS_PRIVATE_KEY = "36ca34f3-6679-4e09-86e3-d0059adb9434"
ATLAS_GROUP_ID = "67694dc86d55bd55a0dd81ca"
CLUSTER_NAME = "Cluster-01"

# AWS S3 Configuration
S3_BUCKET_NAME = "mongodb-backup-3003"
S3_REGION = "ap-south-1"
S3_FILE_PREFIX = "mongodb_backup"

# MongoDB Atlas API Headers
HEADERS = {
    "Content-Type": "application/json"
}

# Step 1: Trigger MongoDB Snapshot
def trigger_snapshot():
    url = f"https://cloud.mongodb.com/api/atlas/v1.0/groups/{ATLAS_GROUP_ID}/clusters/{CLUSTER_NAME}/backup/snapshots"
    
    response = requests.post(url, headers=HEADERS, auth=(ATLAS_PUBLIC_KEY, ATLAS_PRIVATE_KEY))
    data = response.json()
    
    if "id" in data:
        return data["id"]
    else:
        print("Error triggering backup:", data)
        return None

# Step 2: Download Snapshot
def get_snapshot(snapshot_id):
    url = f"https://cloud.mongodb.com/api/atlas/v1.0/groups/{ATLAS_GROUP_ID}/backup/snapshots/{snapshot_id}"
    
    while True:
        response = requests.get(url, headers=HEADERS, auth=(ATLAS_PUBLIC_KEY, ATLAS_PRIVATE_KEY))
        data = response.json()
        
        if data.get("status") == "COMPLETED":
            return data["downloadUrl"]
        
        print("Waiting for snapshot completion...")
        time.sleep(60)

# Step 3: Upload to S3
def upload_to_s3(download_url):
    s3_client = boto3.client("s3", region_name=S3_REGION)
    
    response = requests.get(download_url, stream=True)
    filename = f"{S3_FILE_PREFIX}_{datetime.now().strftime('%Y-%m-%d_%H-%M')}.gz"

    with open(filename, "wb") as file:
        for chunk in response.iter_content(chunk_size=1024):
            file.write(chunk)

    s3_client.upload_file(filename, S3_BUCKET_NAME, filename)
    print(f"Backup uploaded to S3: s3://{S3_BUCKET_NAME}/{filename}")

def lambda_handler(event, context):
    snapshot_id = trigger_snapshot()
    if snapshot_id:
        download_url = get_snapshot(snapshot_id)
        upload_to_s3(download_url)
    return {"statusCode": 200, "body": json.dumps("Backup completed successfully.")}


-> After paste the above in console, u have to install some packages in our local and upload in layers
-> python --version
-> pip --version
-> If its not Install or Reinstall Pip
-> curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
-> python get-pip.py
-> mkdir requests_layer
-> cd requests_layer
-> mkdir -p python
-> pip install requests -t python/
-> Open power shell go to the requst place and execute the below command   (path PS C:\requests_layer>)
-> Compress-Archive -Path python -DestinationPath requests_layer.zip
-> After compress the file, go to lambda, click on Dashboard, click the layers, create layer, give name and upload that Zip file, choose python at runtime, create
-> go to the lambda function, go to below, add layer, click custom layer, choose version, add the layer.
-> make sure handler once, If you application on lambda_function.py name, our handler should be like this lambda_function.lambda_handler
                           If you application on backup.py name, our handler should be like this backup.lambda_handler
-> Go to the Test, give some name and click test







