# What is Relation database
-> Relation database is used to organize structured data into tables in the form of ROWS and COLUMNS.

# What are the SQL databases
-> MySql
-> oracle
-> SQL server
-> Postgre SQL
-> MariaDB

# What is SQL
-> SQL is a relation database structured query language is used to communicate with database.
-> Allows the user to access and MANIPULATE data stored in database

# What is Non-Relation Database
-> Non-Relation database is a collection structured, unstructured and semi structured items which donot store data in tabluer form.

# What is NoSQL
-> NoSQL is a non-relation database that uses the keyvalue pairs to store and retrive data.
-> Unlike a relation database, which stores data in rows and columns

# What is the difference between SQL and NOSQL
       SQL                
-> SQL is a relational database          -> Nosql is non-relation database
-> Fixed schema design and structure     -> Dynamic schema design and structure
-> Handles complex queries               -> Handled large volume of data
-> Vertical scalable                     -> Horizonal scalable

# Advantages and Disadvantages of NoSql
-> High performance and scalability          -> Lack of standardization 
-> Availablity and flexibility               -> Consistency issues
-> Open source and schema less               -> Limited query capabilities

# What are the NoSQL databases
-> Dynamo DB
-> Mongo DB  [Document database]
-> cassandra [Column Based]
-> redis     [Key value]
-> neo4j

# What is Mongo DB
-> It is NoSQL database called(Document database)
-> It stores data in flexible JSON-like document
-> It is highly scalable and flexible database

# What is the comparison between SQL and Mongo DB
   SQL Server              MongoDB
-> Database              -> Database    
-> Table                 -> Collection  
-> Index                 -> Index
-> Row                   -> Document
-> Column                -> Field
-> Joining               -> Linking & Embedding

# Database structure between between SQL and Mongo DB
   SQL Server              MongoDB
-> Database              -> Database     [Database contain one or more collections]
-> Table                 -> Collection   [collections contain different types of documents]
-> Row                   -> Document     [keyvalue pair list or array or nested document]
-> Column                -> Field


# How Does Mongo DB Work
-> Mongo Db stores data objects in collection and documents insted of the tables and rows used in traditional relation databases
 Host
 databes
 collections
 documents

# Why we use Mongo Db
-> Open source database
-> Easy to use
-> Highly Flexible
-> Advanced Security
-> Flexible schema   [Flexible schema design that allows you to meet the ever-changing conditions characteristic of big data application]
-> High Performance

# Key Features of Mongo DB
-> Aggregation
-> GridFS
-> Sharding
-> Document oriented
-> Replication
-> Schema less Database
-> indexing
-> Ad HOC Queries
-> High performance


# Where to use Monogo DB
-> Big data
-> Content Management and Delivery
-> Mobile and Social infrastructure
-> User DataManagement
-> Data Hub


# Data Types in Mongo DB
-> Strings  [characters and grouping of characters is called strings]
-> Boolean  [either true or false]
-> Integer  [digits  1, -1, 3]
-> Double   [2.1, 2.2]
-> Arrays
-> Objected
-> Data


# You will follow the below video link to create Mongodb Atlas and connect to the noejs application
   https://youtu.be/pm-2vw8RzC0?si=IAcEGIDHBmXHCrgA

# To Connect with mongodb Atlas in our local you have MongoDb shell in our windows using below video link
   https://youtu.be/jvaBaxlTqU8?si=Ckct1LqW7O-fYOjU
-> After the install the Mongodb shell you have to use below command to enter into the database
  mongosh "mongodb+srv://admin:mypassword@cluster0.mongodb.net/test?retryWrites=true&w=majority"


# How to give access to the particular person
-> Enter into the project, Click on Database access, click add database user,
   We can give access using below
https://youtu.be/ioASa1k_H_4?si=27JFRuKf9KBJ7OpY
 
 we can give access using create role in cmd. For that follow below link
https://youtu.be/VdSFV41Jlx8?si=0nNuhWBLdd_FlDUc


# Database Commands
show dbs   --> To show the databases
use dbName  --> create and swith to database
db   --> view the current db
db.dropDatabase()   --> To delete the database


# To create one sample table data in database
db.employees.insertOne({
    employee_id: 1,
    first_name: "Manoj",
    last_name: "Potturi",
    email: "manojvarmapotthuri@gmail.com"
});

show collections   -> To tables data
db.employees.drop()   -> To delete the table











# How to install mongo Db in ec2 server
-> https://www.mongodb.com/docs/manual/tutorial/install-mongodb-on-amazon/
-> If we follow the above link you will get the below steps to install the mongo DB
-> cat /etc/os-release    -> To see the version
-> sudo vi /etc/yum.repos.d/mongodb-org-7.0.repo
[mongodb-org-7.0]
name=MongoDB Repository
baseurl=https://repo.mongodb.org/yum/amazon/2023/mongodb-org/7.0/x86_64/
gpgcheck=1
enabled=1
gpgkey=https://pgp.mongodb.com/server-7.0.asc

-> sudo yum install -y mongodb-org
-> sudo systemctl start mongod
-> sudo systemctl enable mongod  
-> sudo systemctl status mongod

# To connect mongo Db outside remotly
-> sudo vi /etc/mongod.conf
-> To change the ip address in network interface and keep 0.0.0.0 to access the all IPs
-> sudo systemctl restart mongod
-> sudo systemctl status mongod

Note: Monogo db is not install in amazon linux. so that you have install in ubuntu using below steps
-> https://www.mongodb.com/docs/manual/tutorial/install-mongodb-on-ubuntu/
-> sudo apt-get install gnupg curl
-> curl -fsSL https://www.mongodb.org/static/pgp/server-7.0.asc | \
   sudo gpg -o /usr/share/keyrings/mongodb-server-7.0.gpg \
   --dearmor
-> echo "deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-server-7.0.gpg ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/7.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-7.0.list
-> sudo apt-get update
-> sudo apt-get install -y mongodb-org
-> sudo systemctl start mongod
-> sudo systemctl daemon-reload
-> sudo systemctl status mongod
-> sudo systemctl enable mongod
-> sudo vi/etc/mongod.conf   [port number path]
-> -> To change the ip address in network interface and keep 0.0.0.0 to access the all IPs
-> sudo systemctl restart mongod
-> sudo systemctl start mongod
-> sudo systemctl status mongod
-> mongosh    --> To enter into the database

# You will install mongodb in windows and connect with ec2 instance
-> https://www.mongodb.com/docs/manual/tutorial/install-mongodb-on-windows/
-> You will install Mongodb compass to see below youtube link
   https://youtu.be/ZQuQ-wHuPlg?si=nykCs3WItfA5yRH9
   https://youtu.be/jvaBaxlTqU8?si=KZnQazx0K3_Mt2uS   --> To work in cmd
-> After complete the install to connet our ec2 server with mongodb compass you will follow the below youtube link
   https://youtu.be/Gz_7WMjv6sE?si=xr_i6IUP6Ute5_WD





# Data base commands
-> show dbs   --> To show the databases
-> use dbName  --> create and swith to database
-> db   --> view the current db
-> db.dropDatabase()   --> To delete the database 

db.createUser(
  {
    user: "kalki",
    pwd: "varma",
    roles: [ { role: "userAdminAnyDatabase", db: "admin" } ]
  }
)

db.getUsers()

# To keep the collection in database
use mydatabase
db.myCollection.insertOne({ name: "John Doe", age: 30 })

db.users.insertOne({ name: "Alice", age: 28, city: "New York" });

db.products.insertMany([
  { name: "Laptop", price: 1200 },
  { name: "Smartphone", price: 800 },
  { name: "Tablet", price: 500 }
]);


show collections   -> To show  the collections

db.createCollection('comments')    --> To create the collection 


# CRUD Operations in Mongodb
-> CRUD means
   C  -> Create
   R  -> Read
   U  -> Update
   D  -> Delete

-> To insert the row
  db.<collection name>.insert({
	'key': 'value',
	'key': 'value',
	'key': 'value'
  })

db.couredetails.insert({
     'name': 'varun',
     'lang': 'javascript',
     'institution': 'AshokIT',
     'member': '3'
})

db.couredetails.insert([{
     'name': 'kiran',
     'lang': 'javascript',
     'institution': 'AshokIT'
     },
     {'name': 'VARMA',
     'lang': 'javascript',
     'institution': 'AshokIT'
     },
     {'name': 'VAMSI',
     'lang': 'javascript',
     'institution': 'AshokIT'
}])

db.<collection name>.find()   --> To show the data in collections
db.couredetails.find()
db.couredetails.find().pretty()
db.couredetails.findone({name:'kiran'})
db.couredetails.find({lang:'javascript'})
db.couredetails.find().limit(2)
db.couredetails.find().count()

-> Update the row
db.couredetails.updateOne(
   { name: 'kiran' }, // Filter criteria
   { $set:
      { name: 'sam', lang: 'javascript', institution: 'AshokIT', member: '2' }
   },
   { upsert: true }
)

db.couredetails.updateOne(
   { name: 'sam' }, // Filter criteria
   { $set:
      { name: 'vamsi', lang: 'javascript', institution: 'AshokIT', member: '2' }
   },
   { upsert: true }
)

-> Increment Operator  [Increase the value]
-> convert from string to numaric
db.couredetails.updateMany(
   { member: { $type: "string" } },
   [
      {
         $set: {
            member: {
               $convert: {
                  input: "$member",
                  to: "int",
                  onError: 0 // Default value if conversion fails
               }
            }
         }
      }
   ]
)


db.couredetails.updateOne(
   { name: 'varun' }, // Filter criteria
   { $inc:{
	member: 3
   }}
)

-> To rename
db.couredetails.updateOne(
   { name: 'varun' }, // Filter criteria
   { $rename:
      { member: '8'
}})


db.couredetails.updateOne(
   { name: 'varun' }, // Filter criteria
   { $rename:
      { lang: 'python'
}})

-> To delete the row
db.couredetails.remove({ name: 'VARMA' })


# How to migrate the data from one mongodb String to another mongodb string
-> First you have install mongo compass and mongo shell using below link
-> https://www.mongodb.com/try/download/community
-> https://www.mongodb.com/try/download/shell
-> Setup to watch below video
-> https://youtu.be/jvaBaxlTqU8?si=Ckct1LqW7O-fYOjU
-> you have to install mongodump by using below 
-> https://www.mongodb.com/try/download/database-tools
-> Set the mongodump in system env variables
-> mongodump --version
-> You will execute below commands. first you should import the data to your local using below command
-> you have create folder in your local and keep that like this below ""D:\mongodb_backup""
-> mongodump --uri="mongodb+srv://<username1>:<password1>@<sourcecluster>.mongodb.net/<dbname>" --out="D:\mongodb_backup" 
-> After import the data to your local then you have export the data to another mongodb from local
-> mongorestore --uri="mongodb+srv://username2:password2@targetcluster.vxamp.mongodb.net/targetDB" "D:\mongodb_backup\frissly_dev"
-> Example:-          mongorestore --uri="mongodb+srv://varmapotthuri4:Varma_3003@backup-cluster.vxamp.mongodb.net/mongobackup" "D:\mongodb_backup\frissly_dev"

    mongodump --uri="mongodb+srv://organicplaceapp:<keep it normal password>@uat-stg-cluster.ivpds.mongodb.net/frissly_stg?retryWrites=true&w=majority&appName=uat-stg-cluster" --out="D:\mongodb_backup_live"
    mongorestore --uri="mongodb+srv://vsrpvarma:<keep it normal password>@uat-cluster.aoiaw.mongodb.net/frissly_stg?retryWrites=true&w=majority&appName=UAT-Cluster" "D:\mongodb_backup_live\frissly_uat"


# How to set up the VPC Peering for MongoDB
-> After setup your backend server in private subnet within VPC
-> You go to the mongoDB, create the cluster and the database in cluster
-> After create the cluster and database in mongoDB. Click the network access at left side, click the VPC peering,
-> Provide the details which appearing there, like accountid, VPC id, VPC CICD, enable Ip whitlist, Choose region, 
-> After set up the above steps, go to VPC and clikc peering connecton and accept the request, later it will take some time to get approval
-> There after go to the click route table of private subnets, click edit, add the peering connection to that route table, give Atlas CIDR (VPC Region) ip at place, choose peering, save


-> If you want to connect with servers which running in public subnet then you have to add as like above to route table of public subenet like below
-> There after go to the click route table of public subnets, click edit, add the peering connection to that route table, give Atlas CIDR (VPC Region) ip at place, choose peering, save

# You will watch below video to get more info
-> https://youtu.be/b78Pz0gWqX4?si=8KIJjA7-Bw0zufn_
-> https://youtu.be/8NITVf0L5X0?si=GbgL9ourI4j97hCD
-> https://youtu.be/kWhIwlNkZm4?si=gOlZRxJf29PTVFr3


# How to import data from local to mongodb
-> We can able to import by using above commands, This is the another method
-> you have to install mongodump tools by using below 
-> https://www.mongodb.com/try/download/database-tools
-> Set the mongodump in system env variables
-> mongodump --version
-> mongoimport --db <database name> --collection <give the collection name> --file D:\mongodb_backup\sampledata.json


# To install mongoshell on ubuntu 
-> https://www.mongodb.com/try/download/shell
-> Choose Linux x64, copy the link
-> wget https://downloads.mongodb.com/compass/mongosh-2.4.2-linux-x64.tgz
-> tar -xvzf mongosh-2.4.2-linux-x64.tgz
-> sudo mv mongosh-2.4.2-linux-x64 /usr/local/mongosh
-> sudo ln -s /usr/local/mongosh/bin/mongosh /usr/local/bin/mongosh
-> mongosh --version
-> mongosh 'mongodb+srv://organicplaceapp:<password>@uat-stg-cluster.ivpds.mongodb.net/?retryWrites=true&w=majority&appName=uat-stg-cluster'



# MonogoDB To S3 bucket Backup Script

# CronJob Backup

#!/bin/bash

# Update package list
echo "Updating package list..."
sudo apt-get update -y

# Install required packages
echo "Installing necessary packages..."
sudo apt update && sudo apt upgrade -y
sudo apt install -y net-tools wget curl unzip apt-transport-https tar

# Install AWS CLI
echo "Installing AWS CLI..."
curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
unzip awscliv2.zip
sudo ./aws/install
rm -rf awscliv2.zip aws

# Create MongoDB backup script
echo "Creating MongoDB backup script..."
cat << 'EOF' > /home/ubuntu/mongo.sh
#!/bin/bash

# Update and install dependencies
sudo apt-get update -y
sudo apt-get install -y curl unzip wget tar awscli

# Install MongoDB Database Tools
wget https://fastdl.mongodb.org/tools/db/mongodb-database-tools-ubuntu2004-x86_64-100.8.0.tgz
tar -xvzf mongodb-database-tools-ubuntu2004-x86_64-100.8.0.tgz
sudo mv mongodb-database-tools-ubuntu2004-x86_64-100.8.0/bin/* /usr/local/bin/
rm -rf mongodb-database-tools-ubuntu2004-x86_64-100.8.0.tgz mongodb-database-tools-ubuntu2004-x86_64-100.8.0/

# Verify installation
mongodump --version

# MongoDB Credentials
MONGO_URI="mongodb+srv://manojvarmapotthutri:Varma_3003@cluster-01.max78.mongodb.net/?retryWrites=true&w=majority&appName=Cluster-01"

# Backup Directory
BACKUP_DIR="/home/ubuntu/mongodb-backup"
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
BACKUP_PATH="$BACKUP_DIR/mongodb_backup_$TIMESTAMP"

# AWS S3 Bucket Details
S3_BUCKET="s3://mongodb-backup-3003"

# Create backup directory if not exists
mkdir -p $BACKUP_DIR

# Take MongoDB backup
mongodump --uri="$MONGO_URI" --out="$BACKUP_PATH"

# Compress the backup
tar -czvf "$BACKUP_PATH.tar.gz" -C "$BACKUP_DIR" "mongodb_backup_$TIMESTAMP"

# Upload to S3
aws s3 cp "$BACKUP_PATH.tar.gz" "$S3_BUCKET/mongodb_backup_$TIMESTAMP.tar.gz"

# Remove old backups (keep last 7 days)
find $BACKUP_DIR -type f -mtime +7 -exec rm -f {} \;

# Remove uncompressed backups
rm -rf "$BACKUP_PATH"

# Delete backup directory after successful upload
rm -rf "$BACKUP_DIR"

echo "MongoDB backup completed, uploaded to S3, and backup directory removed successfully!"
EOF

# Make the script executable
chmod +x /home/ubuntu/mongo.sh

# Execute the script immediately for testing
echo "Executing the MongoDB backup script for the first time..."
/bin/bash /home/ubuntu/mongo.sh

# Add cron job if not exists
echo "Adding cron job for MongoDB backup..."
(crontab -l 2>/dev/null | grep -F "/home/ubuntu/mongo.sh") || (crontab -l 2>/dev/null; echo "*/2 * * * * /bin/bash /home/ubuntu/mongo.sh >> /home/ubuntu/mongo_backup.log 2>&1") | crontab -

# Verify cron job
echo "Cron job added successfully!"
crontab -l



# Backup Chages occur in MongoDb

#!/bin/bash

# Set Variables
BACKUP_DIR="/home/ubuntu/mongodb_backup"
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
BACKUP_NAME="mongodb_backup_${TIMESTAMP}"
MONGO_URI="mongodb+srv://vsrpvarma:%21HKdf7uwekn%40%21%40%23@uat-cluster.aoiaw.mongodb.net/frissly_prod?retryWrites=true&w=majority&appName=UAT-Cluster"
S3_BUCKET="s3://production-mongodb-backups-frissly"
BACKUP_SCRIPT="/home/ubuntu/mongo_backup.sh"

# Ensure Backup Directory Exists
mkdir -p "$BACKUP_DIR" # Ensure the backup directory exists
chmod 755 "$BACKUP_DIR" # Ensure it has write permissions

# Ensure Backup Script Exists
cat << 'EOF' > "$BACKUP_SCRIPT"
#!/bin/bash

# Define the MongoDB database backup directory
BACKUP_DIR="/home/ubuntu/mongodb_backup"
DATE=$(date +%Y-%m-%d-%H-%M-%S)

# Define the MongoDB dump directory
DUMP_DIR="$BACKUP_DIR/dump_$DATE"

# Create the backup directory if it does not exist
mkdir -p "$DUMP_DIR"

# MongoDB URI for Atlas
MONGO_URI="mongodb+srv://vsrpvarma:%21HKdf7uwekn%40%21%40%23@uat-cluster.aoiaw.mongodb.net/frissly_prod?retryWrites=true&w=majority&appName=UAT-Cluster"

# MongoDB database names to backup
DATABASES=("frissly_prod")

# Loop through each database and dump
for DB in "${DATABASES[@]}"; do
  echo "Dumping $DB to $DUMP_DIR/$DB.bson"
  mongodump --uri="$MONGO_URI" --db "$DB" --out "$DUMP_DIR" --gzip

  if [[ $? -ne 0 ]]; then
    echo "Error: Failed to dump database $DB"
    exit 1
  fi
done

# Compress the backup directory into a tarball
echo "Compressing backup into tar file"
tar -czf "$DUMP_DIR.tar.gz" -C "$BACKUP_DIR" "dump_$DATE"

# Check if tar command was successful
if [[ $? -ne 0 ]]; then
  echo "Error: Failed to create tarball"
  exit 1
fi

# Upload the backup tarball to S3
echo "Uploading backup to S3"
aws s3 cp "$DUMP_DIR.tar.gz" s3://production-mongodb-backups-frissly/backups/

# Check if AWS S3 upload was successful
if [[ $? -ne 0 ]]; then
  echo "Error: Failed to upload backup to S3"
  exit 1
fi

# Clean up local backup files
echo "Cleaning up local backup files"
rm -rf "$DUMP_DIR" "$DUMP_DIR.tar.gz"

# Check if cleanup was successful
if [[ $? -ne 0 ]]; then
  echo "Error: Failed to clean up backup files"
  exit 1
fi

echo "Backup and upload completed successfully!"
EOF
chmod +x "$BACKUP_SCRIPT"

# Install Necessary Packages
echo "Installing necessary packages..."
sudo apt-get update -y
sudo apt-get install -y net-tools wget curl unzip apt-transport-https tar jq

# Install AWS CLI
echo "Installing AWS CLI..."
curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
unzip awscliv2.zip
sudo ./aws/install
rm -rf awscliv2.zip aws

# Install MongoDB Database Tools
echo "Installing MongoDB Database Tools..."
wget https://fastdl.mongodb.org/tools/db/mongodb-database-tools-ubuntu2004-x86_64-100.8.0.tgz
tar -xvzf mongodb-database-tools-ubuntu2004-x86_64-100.8.0.tgz
sudo mv mongodb-database-tools-ubuntu2004-x86_64-100.8.0/bin/* /usr/local/bin/
rm -rf mongodb-database-tools-ubuntu2004-x86_64-100.8.0.tgz mongodb-database-tools-ubuntu2004-x86_64-100.8.0/

# Verify Installation
mongodump --version

# MongoDB Change Stream Listener Script (Node.js)
echo "Creating MongoDB listener script..."
cat << 'EOF' > /home/ubuntu/mongo_listener.js
const { MongoClient } = require("mongodb");
const { exec } = require("child_process");

const uri = "mongodb+srv://vsrpvarma:%21HKdf7uwekn%40%21%40%23@uat-cluster.aoiaw.mongodb.net/frissly_prod?retryWrites=true&w=majority&appName=UAT-Cluster";
const client = new MongoClient(uri);

async function watchDatabase() {
    try {
        await client.connect();
        console.log("Connected to MongoDB");

        const db = client.db("frissly_prod"); // Set to the correct database
        const changeStream = db.watch();

        changeStream.on("change", (change) => {
            console.log("Change detected:", JSON.stringify(change, null, 2));
            exec("/bin/bash /home/ubuntu/mongo_backup.sh", (error, stdout, stderr) => {
                console.log("Executing backup script...");
                if (error) {
                    console.error(`Backup Error: ${error.message}`);
                    return;
                }
                if (stderr) {
                    console.error(`Backup Stderr: ${stderr}`);
                    return;
                }
                console.log(`Backup Success: ${stdout}`);
            });
        });

        console.log("Listening for changes...");
    } catch (error) {
        console.error("Error connecting to MongoDB:", error);
        setTimeout(watchDatabase, 5000); // Retry after 5 seconds
    }
}
watchDatabase();
EOF

# Install Node.js and Required Modules
curl -fsSL https://deb.nodesource.com/setup_16.x | sudo -E bash -
sudo apt install -y nodejs
npm install mongodb

# Ensure the MongoDB Listener Script is Executable
chmod +x /home/ubuntu/mongo_listener.js

# Run the Change Stream Listener
nohup node /home/ubuntu/mongo_listener.js > /home/ubuntu/mongo_listener.log 2>&1 &

# Start Initial Backup
/bin/bash "$BACKUP_SCRIPT"

echo "MongoDB change stream listener and backup setup completed successfully!"


# After execute the above script you will execute the below commands
-> ps aux | grep mongo_listener.js
-> nohup node /home/ubuntu/mongo_listener.js > /home/ubuntu/mongo_listener.log 2>&1 &
-> tail -f /home/ubuntu/mongo_listener.log

