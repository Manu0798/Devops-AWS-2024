-> Install the tools from scipt which required. Later you will execute the below script

image: node:20  # Use Node.js 20 image


pipelines:
  default:
    - step:
        runs-on:
          - self.hosted
          - linux.shell
        script:
          # Print environment variables for debugging
          - |
            echo "SonarQube Host: ${SONAR_HOST_URL}"
            echo "Project Key: ${SONAR_PROJECT_KEY}"
            echo "Token Length: ${#SONARQUBE_TOKEN}"

          # Free up disk space before running scans
          - docker system prune -af || true
          - docker volume prune -f || true
          - rm -rf /root/.cache/trivy || true  # Clean old Trivy cache

          # Install required dependencies
          - export DOCKER_HOST="unix:///var/run/docker.sock"  # Ensure correct Docker socket
          - apt-get update && apt-get install -y curl unzip 

          # Install Node.js dependencies, build, and run tests
          - npm install
          - npm run build --if-present
          - npm test --if-present

          # Configure AWS CLI with provided credentials
          - aws configure set aws_access_key_id "$AWS_ACCESS_KEY_ID"
          - aws configure set aws_secret_access_key "$AWS_SECRET_ACCESS_KEY"
          - aws configure set region "$AWS_REGION"


          # Run Trivy filesystem scan for vulnerabilities in the project files
          - trivy fs --format table -o fs-report.html .

          # Install SonarScanner
          - wget -O sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.0.2856-linux.zip
          - unzip sonar-scanner.zip
          - export PATH=$PATH:$(pwd)/sonar-scanner-4.8.0.2856-linux/bin

          # Verify SonarScanner installation
          - sonar-scanner -v

          # Run SonarQube analysis
          - sonar-scanner -Dsonar.projectKey="${SONAR_PROJECT_KEY}" -Dsonar.host.url="${SONAR_HOST_URL}" -Dsonar.login="${SONARQUBE_TOKEN}"

          # Clean up previous Docker images and volumes
          - |
            docker ps -aq --filter "name=${CONTAINER_NAME}" | xargs -r docker stop || true
            docker ps -aq --filter "name=${CONTAINER_NAME}" | xargs -r docker rm || true
            docker images --filter "reference=$DOCKER_IMAGE_NAME*" -q | xargs -r docker rmi -f || true
            docker builder prune -f || true
            docker container prune -f || true
            docker network prune -f || true

          # Build Docker image for the project
          - docker build -t "$DOCKER_IMAGE_NAME" .

          # Run Trivy image scan on the Docker image
          - trivy image --cache-dir "$TRIVY_CACHE_DIR" --format table -o image.html "$DOCKER_IMAGE_NAME"

          # Create the container for testing
          - docker run -itd --name "$CONTAINER_NAME" -p 8089:8081 "$DOCKER_IMAGE_NAME"

          # Collect artifacts for later inspection (e.g., security scans)
          - mkdir -p artifacts
          - cp fs-report.html artifacts/
          - cp image.html artifacts/
          - tar -cvf artifacts.tar artifacts/


          # Clean up workspace to save disk space (Do this last)
          - echo "Cleaning up entire workspace..."
          - rm -rf *

        artifacts:
          - artifacts/*




