-> Go to the Bitbucket, click on repositories, clike setting right side, click workspace settings, click workspace runner at left side bottom
-> Click the linux shell, clikc next, it will give some commands you will execute that commands in your server.

-> Install the below tools to run the script like java, docker, npm, trivy, awscli

vi docker.sh

# Install Docker
# Add Docker's official GPG key
sudo apt-get update -y
sudo apt-get install ca-certificates curl -y
sudo install -m 0755 -d /etc/apt/keyrings
sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
sudo chmod a+r /etc/apt/keyrings/docker.asc

# Add Docker repository
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] \
  https://download.docker.com/linux/ubuntu \
  $(lsb_release -cs) stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt-get update -y
sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin -y
sudo chmod 666 /var/run/docker.sock
sudo usermod -aG docker jenkins
sudo usermod -aG docker ubuntu
sudo systemctl enable docker
sudo systemctl start docker
echo "Docker installation complete."


vi trivy.sh
# Install Trivy-Scanner
sudo apt-get install wget apt-transport-https gnupg lsb-release -y
wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
sudo apt-get update
sudo apt-get install trivy
echo "Trivy installation complete."

vi node.sh
sudo apt install npm -y

vi awscli.sh
# Install AWS_CLI
sudo apt-get update -y
sudo apt-get install -y curl unzip
curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
unzip awscliv2.zip
sudo ./aws/install


vi sonar.sh
sudo apt-get install fontconfig openjdk-17-jre -y
# Install SonarQube
# Install unzip if not already installed
sudo apt-get install unzip -y

# Create a user for SonarQube
sudo adduser --disabled-password --gecos 'SonarQube' sonarqube

# Switch to SonarQube user and install SonarQube
sudo su - sonarqube <<EOF
# Fetch the latest SonarQube version from the official source
SONARQUBE_VERSION=$(curl -s https://api.github.com/repos/SonarSource/sonarqube/releases/latest | grep -oP '"tag_name": "\K(.*)(?=")')
SONARQUBE_URL="https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-${SONARQUBE_VERSION}.zip"

# Download and extract SonarQube
wget https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-9.4.0.54424.zip
unzip sonarqube-9.4.0.54424.zip
chmod -R 755 /home/sonarqube/sonarqube-9.4.0.54424
# Change ownership
chown -R sonarqube:sonarqube /home/sonarqube/sonarqube-9.4.0.54424
# Start SonarQube
cd sonarqube-9.4.0.54424/bin/linux-x86-64/
./sonar.sh start
EOF

echo "Installation complete. Jenkins, Docker, Maven, Git, and SonarQube are set up."
echo "Sonarqube installation complete."


image: node:20  # Use Node.js 20 image


pipelines:
  default:
    - step:
        runs-on:
          - self.hosted
          - linux.shell
        script:
          # Print environment variables for debugging
          - |
            echo "SonarQube Host: ${SONAR_HOST_URL}"
            echo "Project Key: ${SONAR_PROJECT_KEY}"
            echo "Token Length: ${#SONARQUBE_TOKEN}"

          # Free up disk space before running scans
          - docker system prune -af || true
          - docker volume prune -f || true
          - rm -rf /root/.cache/trivy || true  # Clean old Trivy cache

          # Install required dependencies
          - export DOCKER_HOST="unix:///var/run/docker.sock"  # Ensure correct Docker socket
          - apt-get update && apt-get install -y curl unzip 

          # Install Node.js dependencies, build, and run tests
          - npm install
          - npm run build --if-present
          - npm test --if-present

          # Configure AWS CLI with provided credentials
          - aws configure set aws_access_key_id "$AWS_ACCESS_KEY_ID"
          - aws configure set aws_secret_access_key "$AWS_SECRET_ACCESS_KEY"
          - aws configure set region "$AWS_REGION"


          # Run Trivy filesystem scan for vulnerabilities in the project files
          - trivy fs --format table -o fs-report.html .
          
          # Install OWASP Dependency-Check
          - wget https://github.com/jeremylong/DependencyCheck/releases/download/v11.1.1/dependency-check-11.1.1-release.zip
          - unzip dependency-check-11.1.1-release.zip
          - ./dependency-check/bin/dependency-check.sh --project "NodeJS App" --scan . --out ./dependency-check-report --format XML

          # Install SonarScanner
          - wget -O sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.0.2856-linux.zip
          - unzip sonar-scanner.zip
          - export PATH=$PATH:$(pwd)/sonar-scanner-4.8.0.2856-linux/bin

          # Verify SonarScanner installation
          - sonar-scanner -v

          # Run SonarQube analysis
          - sonar-scanner -Dsonar.projectKey="${SONAR_PROJECT_KEY}" -Dsonar.host.url="${SONAR_HOST_URL}" -Dsonar.login="${SONARQUBE_TOKEN}"

          # Clean up previous Docker images and volumes
          - |
            docker ps -aq --filter "name=${CONTAINER_NAME}" | xargs -r docker stop || true
            docker ps -aq --filter "name=${CONTAINER_NAME}" | xargs -r docker rm || true
            docker images --filter "reference=$DOCKER_IMAGE_NAME*" -q | xargs -r docker rmi -f || true
            docker builder prune -f || true
            docker container prune -f || true
            docker network prune -f || true

          # Build Docker image for the project
          - docker build -t "$DOCKER_IMAGE_NAME" .

          # Run Trivy image scan on the Docker image
          - trivy image --cache-dir "$TRIVY_CACHE_DIR" --format table -o image.html "$DOCKER_IMAGE_NAME"

          # Create the container for testing
          - docker run -itd --name "$CONTAINER_NAME" -p 8089:8081 "$DOCKER_IMAGE_NAME"

          # Collect artifacts for later inspection (e.g., security scans)
          - mkdir -p artifacts
          - cp fs-report.html artifacts/
          - cp image.html artifacts/
          - cp ./dependency-check-report/dependency-check-report.xml artifacts/
          - tar -cvf artifacts.tar artifacts/


          # Clean up workspace to save disk space (Do this last)
          #- echo "Cleaning up entire workspace..."
          #- rm -rf *

        artifacts:
          - artifacts/*




# For NDV Key
              # Install SonarScanner
              - wget -O sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.0.2856-linux.zip
              - unzip sonar-scanner.zip
              - export PATH=$PATH:$(pwd)/sonar-scanner-4.8.0.2856-linux/bin
              - ./dependency-check/bin/dependency-check.sh --project "NodeJS App" --scan . --out ./dependency-check-report --format XML --nvdApiKey="$NVD_API_KEY"




# For overall with mail (But mail is not working) without install Trivy in our local

image: node:20  # Use Node.js 20 image


pipelines:
  default:
    - step:
        runs-on:
          - self.hosted
          - linux.shell
        script:
          # Print environment variables for debugging
          - |
            echo "SonarQube Host: ${SONAR_HOST_URL}"
            echo "Project Key: ${SONAR_PROJECT_KEY}"
            echo "Token Length: ${#SONARQUBE_TOKEN}"

          # Free up disk space before running scans
          - docker system prune -af || true
          - docker volume prune -f || true
          - rm -rf /root/.cache/trivy || true  # Clean old Trivy cache

          # Install required dependencies
          - export DOCKER_HOST="unix:///var/run/docker.sock"  # Ensure correct Docker socket
          - apt-get update && apt-get install -y curl unzip awscli msmtp mpack jq

          # Install Node.js dependencies, build, and run tests
          - npm install
          - npm run build --if-present
          - npm test --if-present

          # Configure AWS CLI with provided credentials
          - aws configure set aws_access_key_id "$AWS_ACCESS_KEY_ID"
          - aws configure set aws_secret_access_key "$AWS_SECRET_ACCESS_KEY"
          - aws configure set region "$AWS_REGION"

          # Install Trivy for security scanning
          - curl -sfL https://github.com/aquasecurity/trivy/releases/download/v0.39.0/trivy_0.39.0_Linux-64bit.deb -o trivy.deb
          - sudo dpkg -i trivy.deb

          # Set custom Trivy cache directory to prevent "no space left on device" error
          - export TRIVY_CACHE_DIR=/tmp/trivy-cache
          - mkdir -p "$TRIVY_CACHE_DIR"

          # Run Trivy filesystem scan for vulnerabilities in the project files
          - trivy fs --cache-dir "$TRIVY_CACHE_DIR" --format table -o fs-report.html .

          # Install SonarScanner
          - wget -O sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.0.2856-linux.zip
          - unzip sonar-scanner.zip
          - export PATH=$PATH:$(pwd)/sonar-scanner-4.8.0.2856-linux/bin

          # Verify SonarScanner installation
          - sonar-scanner -v

          # Run SonarQube analysis
          - sonar-scanner -Dsonar.projectKey="${SONAR_PROJECT_KEY}" -Dsonar.host.url="${SONAR_HOST_URL}" -Dsonar.login="${SONARQUBE_TOKEN}"

          # Clean up previous Docker images and volumes
          - |
            docker ps -aq --filter "name=${CONTAINER_NAME}" | xargs -r docker stop || true
            docker ps -aq --filter "name=${CONTAINER_NAME}" | xargs -r docker rm || true
            docker images --filter "reference=$DOCKER_IMAGE_NAME*" -q | xargs -r docker rmi -f || true
            docker builder prune -f || true
            docker container prune -f || true
            docker network prune -f || true

          # Build Docker image for the project
          - docker build -t "$DOCKER_IMAGE_NAME" .

          # Run Trivy image scan on the Docker image
          - trivy image --cache-dir "$TRIVY_CACHE_DIR" --format table -o image.html "$DOCKER_IMAGE_NAME"

          # Create the container for testing
          - docker run -itd --name "$CONTAINER_NAME" -p 8089:8081 "$DOCKER_IMAGE_NAME"

          # Collect artifacts for later inspection (e.g., security scans)
          - mkdir -p artifacts
          - cp fs-report.html artifacts/
          - cp image.html artifacts/
          - tar -cvf artifacts.tar artifacts/

          # Configure msmtp for sending emails
          - |
            cat <<EOF > ~/.msmtprc
            account outlook
            host smtp.office365.com
            port 587
            auth on
            tls on
            tls_starttls on
            user "${OUTLOOK_EMAIL}"
            password "${OUTLOOK_PASSWORD}"
            from "${OUTLOOK_EMAIL}"
            logfile ~/.msmtp.log
            account default : outlook
            EOF
            chmod 600 ~/.msmtprc  # Secure permissions

          # Compose email body
          - |
            cat <<EOF > email.txt
            Subject: Bitbucket Pipeline - Scan & Build Report
            To: ${OUTLOOK_EMAIL}
            From: ${OUTLOOK_EMAIL}

            Hello,

            The Bitbucket pipeline has completed successfully. Please find the security scan reports attached.

            Best Regards,
            Bitbucket Pipeline
            EOF

          # Attach reports and send email
          - mpack -s "Bitbucket Pipeline - Scan & Build Report" -d email.txt artifacts/fs-report.html "${OUTLOOK_EMAIL}"
          - mpack -s "Bitbucket Pipeline - Scan & Build Report" -d email.txt artifacts/image.html "${OUTLOOK_EMAIL}"

          # Clean up workspace to save disk space (Do this last)
          - echo "Cleaning up entire workspace..."
          - rm -rf *

        artifacts:
          - artifacts/*



