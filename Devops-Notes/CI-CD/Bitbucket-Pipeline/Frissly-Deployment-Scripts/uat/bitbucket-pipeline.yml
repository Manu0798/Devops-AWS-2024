image: node:22

pipelines:
  branches:
    uat:
      - step:
          name: Build, Test, Scan, and Push Docker Image to ECR (uat)
          runs-on:
            - self.hosted
          services:
            - docker
          caches:
            - node
          script:
            # Print environment variables for debugging
            - |
              echo "SonarQube Host: ${SONAR_HOST_URL}"
              echo "Project Key: ${SONAR_PROJECT_KEY}"
              echo "Token Length: ${#SONARQUBE_TOKEN}"

            # Free up disk space before running scans
            - docker system prune -af || true
            - docker volume prune -f || true
            - rm -rf /root/.cache/trivy || true  # Clean old Trivy cache

            # Install required dependencies
            - apt-get update && apt-get install -y curl unzip awscli jq mutt

            # Install Node.js dependencies, build, and run tests
            - npm install
            - npm run build --if-present
            - npm test --if-present
            
            # Configure AWS CLI with provided credentials
            - aws configure set aws_access_key_id "$AWS_ACCESS_KEY_ID"
            - aws configure set aws_secret_access_key "$AWS_SECRET_ACCESS_KEY"
            - aws configure set region "$AWS_REGION"

            # Install Trivy for security scanning
            - curl -sfL https://github.com/aquasecurity/trivy/releases/download/v0.39.0/trivy_0.39.0_Linux-64bit.deb -o trivy.deb
            - dpkg -i trivy.deb

            # Set custom Trivy cache directory to prevent "no space left on device" error
            - export TRIVY_CACHE_DIR=/tmp/trivy-cache
            - mkdir -p $TRIVY_CACHE_DIR

            # Run Trivy filesystem scan for vulnerabilities in the project files
            - trivy fs --cache-dir $TRIVY_CACHE_DIR --format table -o fs-report.html .

            # Install SonarScanner
            - wget -O sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.0.2856-linux.zip
            - unzip sonar-scanner.zip
            - export PATH=$PATH:$(pwd)/sonar-scanner-4.8.0.2856-linux/bin

            # Verify SonarScanner installation
            - sonar-scanner -v

            # Run SonarQube analysis
            - sonar-scanner -Dsonar.projectKey="${SONAR_PROJECT_KEY}" -Dsonar.host.url="${SONAR_HOST_URL}" -Dsonar.login="${SONARQUBE_TOKEN}"

            # Check SonarQube Quality Gate
            - |
              echo "⏳ Checking SonarQube Quality Gate result..."
              RESPONSE=$(curl -s -u "${SONARQUBE_TOKEN}:" "${SONAR_HOST_URL}/api/qualitygates/project_status?projectKey=${SONAR_PROJECT_KEY}")
              SONAR_STATUS=$(echo "$RESPONSE" | jq -r '.projectStatus.status')

              echo "SonarQube Quality Gate Status: $SONAR_STATUS"

              if [ "$SONAR_STATUS" == "ERROR" ]; then
                echo "❌ Quality Gate Failed! Skipping waiting stage and continuing pipeline."
              else
                MAX_ATTEMPTS=10
                ATTEMPTS=0
                while [ "$ATTEMPTS" -lt "$MAX_ATTEMPTS" ]; do
                  RESPONSE=$(curl -s -u "${SONARQUBE_TOKEN}:" "${SONAR_HOST_URL}/api/qualitygates/project_status?projectKey=${SONAR_PROJECT_KEY}")
                  SONAR_STATUS=$(echo "$RESPONSE" | jq -r '.projectStatus.status')

                  echo "Attempt $((ATTEMPTS + 1)) - SonarQube Quality Gate Status: $SONAR_STATUS"

                  if [ "$SONAR_STATUS" == "OK" ]; then
                    echo "✅ Quality Gate Passed!"
                    break
                  elif [ "$SONAR_STATUS" == "ERROR" ]; then
                    echo "❌ Quality Gate Failed! Skipping wait and proceeding."
                    break
                  fi

                  ATTEMPTS=$((ATTEMPTS + 1))
                  sleep 10
                done
              fi

            # Build Docker image for the project
            - docker build -t "$DOCKER_IMAGE_NAME" .

            # Run Trivy image scan on the Docker image
            - trivy image --cache-dir $TRIVY_CACHE_DIR --format table -o image.html "$DOCKER_IMAGE_NAME"
            
            # ------------------------------
            # 🟢 ECR Repository Management
            # ------------------------------
            - |
              # Ensure valid ECR repository name
              export ECR_REPO_NAME=$(echo "$ECR_REPO_NAME" | tr -d '[:space:]' | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9._-]//g')

              echo "✅ Final ECR Repository Name: '${ECR_REPO_NAME}'"

              # Check if ECR repository exists, if not, create it
              echo "🔍 Checking if ECR repository exists..."
              if ! aws ecr describe-repositories --repository-names "$ECR_REPO_NAME" --region "$AWS_REGION" > /dev/null 2>&1; then
                echo "🚀 Creating ECR repository: $ECR_REPO_NAME"
                aws ecr create-repository --repository-name "$ECR_REPO_NAME" --region "$AWS_REGION"
              else
                echo "✅ ECR repository already exists."
              fi

            # Log in to AWS ECR
            - |
              aws ecr get-login-password --region "$AWS_REGION" --profile default | \
              docker login --username AWS --password-stdin "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com"

            # Tag and push the Docker image
            - |
              # Ensure IMAGE_TAG is valid by removing spaces
              export IMAGE_TAG=$(echo "$IMAGE_TAG" | tr -d '[:space:]')

              echo "🔄 Tagging Docker Image..."
              docker tag "$DOCKER_IMAGE_NAME:latest" "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO_NAME:$IMAGE_TAG"

            # Push the Docker image to ECR
            - |
              docker push "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO_NAME:$IMAGE_TAG"

            # Clean up unused Docker images and volumes
            - |
              docker system prune -af || true
              docker volume prune -f || true

            # Collect artifacts for later inspection (e.g., security scans)
            - mkdir -p artifacts
            - cp fs-report.html artifacts/
            - cp image.html artifacts/
            - tar -cvf artifacts.tar artifacts/
            
            # ------------------------------
            # 📧 Send Email Notification
            # ------------------------------
            - |
              SMTP_SERVER="$SMTP_SERVER"
              SMTP_PORT="$SMTP_PORT"
              SMTP_USER="$SMTP_USER"
              SMTP_PASS="$SMTP_PASS"  # Use an App Password, not your actual Gmail password
              TO_EMAIL="$TO_EMAIL"
              FROM_EMAIL="$FROM_EMAIL"
              SUBJECT="🚀 Staging Deployment Complete"
              BODY="Hello Team,\n\nThe UAT deployment for branch 'uat' has been successfully completed and is now live.\n\n🔗 Bitbucket Pipeline: https://bitbucket.org/workspace/repo/pipelines/\n\nThank you for your support.\n\nBest Regards,\nThe DevOps Team."

              # Send email using Mutt
              echo -e "$BODY" | mutt -s "$SUBJECT" \
                -e "set from=\"$FROM_EMAIL\"" \
                -e "set smtp_url=\"smtp://$SMTP_USER:$SMTP_PASS@$SMTP_SERVER:$SMTP_PORT/\"" \
                -e "set smtp_pass=\"$SMTP_PASS\"" \
                -e "set ssl_starttls=yes" \
                -e "set ssl_force_tls=yes" \
                -a "artifacts/fs-report.html" \
                -a "artifacts/image.html" \
                -- "$TO_EMAIL"

            - echo "📧 UAT deployment notification email sent to ${TO_EMAIL}"

          artifacts:
            - artifacts/*
