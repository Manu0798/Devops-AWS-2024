# How to create Docker file 
We will install tomcat on centos
what steps we want to run the tomcat server
1) Pull the centos from docker hub            FROM
2) change the dir cd /opt                     WORKDIR
3) Install java                               RUN
4) Download the tomcat from website           RUN or ADD
5) extract the file                           RUN
6) Tell docker that it runs on port 8080      EXPOSE
7) start the tomcat service                   CMD [it will run in runtime]

FROM amazonlinux:latest
WORKDIR cd /opt
RUN yum install java-11-amazon-corretto -y
ADD https://downloads.apache.org/tomcat/tomcat-9/v9.0.80/bin/apache-tomcat-9.0.80.tar.gz.asc . [Suppose if you use run wget Url]
RUN tar -xvf apache-tomcat-9.0.80.tar.gz.asc
EXPOSE 8080
CMD ["/opt/apache-tomcat-9.0.80/bin/catalina.sh", "run"]    [catalina.sh is available in bin folder]

If you want to write dockerfile manually you will write like above

# how to create some normal dockerfiles
FROM amazonlinux:latest
RUN mkdir dockerdata
RUN echo "hello what are you doing" > /dockerdata/file1
ENV name manoj > /dockerdata
RUN touch file2

FROM amazonlinux:latest
VOLUME ["/name1"]
WORKDIR name1
RUN manoj1


# How to create nginx in docker file

# Use an official Nginx image as the base image
FROM nginx:latest

# Expose the HTTP port (default is 80)
EXPOSE 80

# Define the command to start Nginx when the container starts
CMD ["nginx", "-g", "daemon off;"]

# How to create tomcat in docker file

# Use an official Tomcat image as the base image
FROM tomcat:latest

# (Optional) Set environment variables for Tomcat manager access
ENV CATALINA_OPTS="-Duser.username=admin -Duser.password=admin -Duser.roles=manager-gui,manager-script"
ENV CATALINA_HOME=/usr/local/tomcat

# (Optional) Copy a custom context.xml for manager access
# COPY context.xml $CATALINA_HOME/webapps/manager/META-INF/

# (Optional) Copy a custom server.xml for additional configuration
# COPY server.xml $CATALINA_HOME/conf/

# Expose the default Tomcat port
EXPOSE 8080

# Start Tomcat when the container starts
CMD ["catalina.sh", "run"]


FROM tomcat:8.0.20-jre8
MAINTAINER Ashok <ashok@oracle.com>
EXPOSE 8080
#COPY target/maven-web-app.war /usr/local/tomcat/webapps/maven-web-app.war


How to create the httpd image in docker file



# Frontend

# Step 1: Build Stage
# Use an official Node.js image to build the application
FROM node:16 as build

# Set the working directory in the container
WORKDIR /app

# Copy the package.json and package-lock.json files to the container
COPY package*.json ./

# Install dependencies
RUN npm install

# Copy the rest of the application files to the container
COPY . .

# Build the application using Vite
RUN npm run build

# Step 2: Serve the application
# Use an official Nginx image to serve the built app
FROM nginx:alpine

# Copy the build folder from the build stage into Nginx's public directory
COPY --from=build /app/dist /usr/share/nginx/html

# Expose the port the app will run on
EXPOSE 80

# Start Nginx when the container is run
CMD ["nginx", "-g", "daemon off;"]




# Backend

# Stage 1: Build stage
FROM node:20 AS builder

WORKDIR /app

COPY package*.json ./
RUN npm install

COPY . .

# Remove this line if no build step is required
# RUN npm run build

# Stage 2: Production stage
FROM node:20-slim

WORKDIR /app

COPY --from=builder /app .

EXPOSE 8081

CMD ["npm", "start"]



# latest frontend

# Step 1: Build Stage
# Use an updated Node.js version (Node 18+)
FROM node:18 as build

# Set the working directory in the container
WORKDIR /app

# Copy the package.json and package-lock.json files to the container
COPY package*.json ./

# Install dependencies
RUN npm install

# Copy the rest of the application files to the container
COPY . .

# Ensure crypto is properly initialized for Vite
RUN node -e "globalThis.crypto = require('crypto').webcrypto;"

# Build the application using Vite
RUN npm run build

# Step 2: Serve the application
# Use an official Nginx image to serve the built app
FROM nginx:alpine

# Copy the build folder from the build stage into Nginx's public directory
COPY --from=build /app/dist /usr/share/nginx/html

# Expose the port the app will run on
EXPOSE 80

# Start Nginx when the container is run
CMD ["nginx", "-g", "daemon off;"]


# Delivery App

FROM node:18

# Set working directory
WORKDIR /app

# Copy package files and install dependencies first for better caching
COPY package.json package-lock.json ./
RUN npm install --legacy-peer-deps  # Ensures compatibility with all dependencies

# Ensure Jest is installed globally to avoid missing dependency issues
RUN npm install -g jest

# Copy the rest of the application files
COPY . .

# Expose the necessary port (adjust if needed)
EXPOSE 3000

# Start the application (adjust the start command if necessary)
CMD ["npm", "start"]




# Mobile app 

# Use an official Node.js runtime as a parent image
FROM node:18

# Set the working directory inside the container
WORKDIR /app

# Copy package.json and package-lock.json
COPY package*.json ./

# Install dependencies
RUN npm install

# Copy the rest of the application files
COPY . .

# Expose port (if your app runs a local server, e.g., for Metro Bundler)
EXPOSE 8081

# Start the React Native Metro Bundler
CMD ["npx", "react-native", "start"]


