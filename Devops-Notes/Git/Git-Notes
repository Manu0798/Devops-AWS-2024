# What is the Version Control
-> Version control system (VCS) is a software that helps you manage changes to our entire code over time. 
-> It allows multiple people to collaborate on a project, track changes, and easily revert back to previous versions if needed. 
-> One popular VCS is Git.

# We have two version control system
-> Centralized Version Control System [CVS, SVN]
-> Distributed Version Control System [Git]

# Centralized Version Control System
-> Database maintained at one site
-> If centralized system fails entire system is halted
-> Less reliable

# Distributed Version Control System
-> Database maintained at number of different sites
-> If one system fails system continues work with other 
-> More reliable

# Examples
Centralized vs Distributed Version Control Systems

Feature	                       Centralized VCS (CVCS)	                     Distributed VCS (DVCS)
Where is the code stored?	  One central server (main copy)	              Everyone has a full copy
If server goes down?	      You can't work or get history	                  You can still work locally
Examples	                  SVN, Perforce	                                  Git, Mercurial
How do you commit changes?	  Commit directly to central server	              Commit to your local machine first, then push
Speed	                      Slower (needs server for most actions)	      Faster (local operations)
Collaboration	              Always needs internet connection	              Can work offline, push later


Easy Example:
Imagine a group project:

Centralized (CVCS) â€” like SVN:
You have one master notebook kept in the classroom.

Whenever you want to write or read something, you must go to the classroom and use the notebook.

If the classroom is locked, you can't do anything.

Distributed (DVCS) â€” like Git:
Every student has their own full copy of the notebook at home.

You can write and read at home (even without internet).

When ready, you can go and share your updates with the main notebook.

In short:
Centralized VCS â†’ "One main brain."

Distributed VCS â†’ "Everyone has a full brain!"




# What is fork in github
-> On GitHub, "fork" refers to creating a personal copy of someone else's repository. This allows you to freely experiment with changes without affecting the original project

# What is git
-> Git standards for Global Information Tracker
-> Git is a distribution version control system that allow people collaborate on project

# what is git hub
-> Git hub is the remote repository hosting service and collaboration platform
-> It provide the free and paid services
-> Git-hub having the repository
-> Git-hub encourages teams to work together build and edit their site content. 
-> Addressing issues and reviewing PR's and commits.

# what is repository
-> Repository having the source code data

# Git Commands
-> git init .   --> It install the empty repository
-> git status  --> To check the current repository status, including change, untracked and statged files.
-> git config --global user.name <write some name> --> Config the git settings such as username and email
-> git config --global user.email <write mail id> 
-> git add .    --> Take files from untracked and modified staged to stagged stage [Untracked means newly created files][modify means if you do any change in file after commit then file it commes unstagged or modifyes staged]
-> git commit -m "somename"  (or) git commit -m .   --> Take the staged files into local repo
-> git remote[Manage the connection to remote repository such adding and remove remote]
-> git remote add <name>  -->  To add the origin name
-> git remote add origin <git hub url>  --> To add the git hub url to origin
-> git remote rename <old-name> <new-name>   --> To Rename the origin name
-> git remote remove <name>  --> To remove the origin name
-> git remote -v  --> To see list of remote
-> git log  --> To see the commit history
-> git push --> push the data from local repo to remote repo
-> git push -u origin branch name --> push the particular branch data from local repo to remote repo
-> git branch  --> To see the git branches [It is used to maintain the spearate code base is called git branch]
-> git branch <branch name>  --> To create the branch name
-> git checkout -b <branch name>  --> It create the new branch and checkout that branch
-> git checkout <branch name>   --> To shift from one branch to another branch
-> git merge <branch name>      --> [It merge the changes from one branch to another branch][It wont maintain the liner commit history]
    Merges are two types
      1) fast forward merge  --> we will merge without commit
      2) recursive       --> we will merge after commit
-> git rebase <branch name>    --> [It merge the changes from one branch to another branch][It maintain the liner commit history]
-> git stash   --> [it save the changes from local repo to tempory location to make working directory clean]
-> git stash list  --> To see stash list
-> git stash apply --> It will take lastet file from git stash. that file wont delete in git stash when we do git stash apply
-> git stash drop  --> It will delete files in git stash 
-> git stash pop   --> It will take latest file as well as it will delete file automatically in git stash
-> git stash apply stash@{enter stash number}   --> it will take particular files from git stash
-> git stash -u    --> It moved the file into untracked stage from git stash
-> git stash branch <branch name>   --> if you want to create to separate branch with git stash files

-> git diff           --> View the difference between changes made to file
-> git clone  --> Download the remote repository on your local machine
-> git pull  --> It pull the data from remote repository to local repository
-> git pull <repo Url> <branch name>  --> It pull the particular branch data from remote repo to local repo
-> git clean -f <file>   --> To remove the file from untracked stage

# Git revert and resert
# revert
-> It is used to undo changes introduce by specific commit while preserving the commit history
-> git revert <commit id>
-> git revert HEAD   --> It will take first commit in commit history
-> git revert HEAD~<number> 
        Ex:-
             git revert HEAD~1  --> It will take second commit in commit history because first HEAD it count from after HEAD
-> git revert <commit id> --no-edit   --> It will commit without open any editor
Note:- All Above revert commands will work same 

-> git update-ref -d HEAD    --> It will take first commit into staging area


# reset
-> It is used to move the HEAD ponit to specific commit, It modifies the commit history by adjusting the HEAD pointer.
-> git reset <commit id>  --> All the above commit history will delete from pointed commit and changes move to working directory  [Git mixed resert]
-> git reset --soft <commit id>  --> All the above commit history will delete from pointed commit and changes move to stagging area
-> git reset --hard <commit id>  --> All the above commit history will delete from pointed commit and files will delete
-> git reset HEAD~<number> 
        Ex:-
             git reset HEAD~1  --> It will take first commit in commit history because first HEAD it count from after HEAD


# To get more details about git revert and git resert. you will watch below link
  https://youtu.be/mTNWyyMbxmU?si=6uudwsD2FowavO2M


# Git restore
-> git restore command is used to undo changes in your working directory or staging area (index) in Git.
-> git restore <filename>  --> Discard the changes in working directory
-> git restore --staged <filename>   --> It take the file from stage area to working directory   --> This is for modified files
-> git rm --cached <filename>  --> It take the file from stage area to working directory  --> This is for newly created file


# What is the difference between git fetch and git pull
git fetch: Downloads updates from the remote repository without merging them into your local branch.
git pull: Downloads updates from the remote repository and directly merges them into your local branch.

# What is the difference between FORk and CLONE
-> FROK will create the copy of repository on remote server
-> CLONE will download the remote repository in local

# What are the files and folders would be in .git folder
.git will track our entire repository
-> HEAD(file) -->  This file points to the current branch reference, which indicates the branch that is currently checked out.
-> config(file) --> This file contains repository-specific configuration settings, such as user information, passwords, TLS certificates, and other Git settings.
-> description(file) --> This file is used by Gitweb and other web interfaces to provide a brief description of the repository. Itâ€™s mostly used for informational purposes.
-> hooks(dir) --> This directory contains sample scripts for Git hooks. Prevent the unconditional commits and API using HOOKS
-> info(dir) --> This directory contains the exclude file, which can be used to specify files and directories that should be ignored by Git, in addition to the patterns specified in .gitignore.
-> objects(dir) --> This directory stores all the content of your repository, including commits, trees (directories), and blobs (file contents). Each object is stored as a file with a name based on its hash.
-> refs(dir) --> This directory contains references to commit objects, including branches and tags.



# To merge the data from one branch to another branch we have three ways to merge the data.
-> merge [you would be keep in destination place and use the git merge command] 
-> rebase
-> cherry-pick [Cheery-pick easy to merge one or two commits if we want to merge more commit its to difficult to merge all commit manually so that we will use merge and rebase]

# What is cherry-pick
-> cherry-pick is a command that lets you pick a specific commit from one branch and apply it to another branch, without merging the entire branch.

ðŸ”¹ Example
-> Letâ€™s say you have this situation:
-> feature-branch has 5 commits (A-B-C-D-E)
-> main only needs commit C, not all the changes
-> git checkout main
-> git cherry-pick <commit-hash-of-C>
-> Now commit C (and only C) is applied to main.




# When you get below error while doing git push 
you will use below to command to seems like this master -> master
-> git push -f origin master  --> If it is not work you will execute below steps
-> git clone <URL>  -> later you will execute above git push steps even the it is not work you will execute below steps
-> git fetch origin master:tmp
-> git rebase tmp
-> git push --set-upstream origin master

https://youtu.be/Twi3gtYFDqk?si=-MJCWlnKtS53Lemx

# If you want to push the data into Another branch
First you have to checkout from whichever branch do you want to push the data to git repo
[when you do the push to another branch master files also will come to that branch along with new files]

# It you want to merger files from one branch to another branch
you would be keep in destination place and use the git merge command. when you do the merge in terminal it wont apply in git hub
git log
if you want to check the files ls -l

# It you want to use the pull command
when someone changes code in git hub then you will use git pull command 
Git pull command it will take code from git repo to local repo
If you want to pull changes to another branch you will use this below command keep in branch
git pull <repo Url> branch name

# What is git branch strategy
-> We are using these branches in our brnaching Strategy
-> Main/Master  --> This is the primary branch that holds the stable, production-ready code.
-> Feature  --> Feature branches are created from main. Feature branches are used to develop new features or make changes to the application.
                Once a feature is complete, it is merged back into main
-> Release  --> Release branches are created from the main branch once the development work (usually in feature branches) is completed
            --> If you get any bugs while you are doing deployment from feature branch we will reslove in that branch.
            --> Once the release is ready, it's merged into both main
-> Hot fix  --> Hotfix branches are created from the main.
            --> Hotfix branches are used to address critical bugs or issues in the production code. These issues need to be fixed immediately, without waiting for the next release cycle.
            --> One fix the error you will merge the code to both main and release or feature to avoid the bug reappearing in future.

# What are the difference difference between new repo and new project
New repo  --> It is the part of git and git hub
New project --> It is the part of only git hub

# What is pull request
Akowledge and review the changes
It merge the changes from one branch from another branch
We can create pull request in two types
1) Pull request to repository
2) Pull request to branch within repository

# If you want to change the default branch name
-> Go to settings, click repository, chnage the branch name

# What is GubHub Project
If you want to assign any repositories project to particular person and daily get the status of the repository then you will use Project

# How to clone the repository using SSH
-> create the SSh in your terminal
-> ssh-keygen
-> cd .ssh/
-> Copy the pubilc key and go the github and go to setting and click SSh and GPG keys and click new SSh key and give some title name and paste the public ssh-key in key



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


Solution 1: Clear Cached Credentials
Since you're on Windows using Git Bash, you can clear the cached GitHub credentials as follows:

Open Credential Manager:

Go to Control Panel â†’ Credential Manager â†’ Windows Credentials.
Look for any entries related to github.com.
Remove GitHub Credentials:

Delete any stored credentials related to github.com. This will force Git to ask for new credentials the next time you push.
Retry Pushing:

git push -u origin main


# 2. Remove inner .git so it's no longer its own repo
cd ECR-VPC
Remove-Item -Recurse -Force .git
cd ..
