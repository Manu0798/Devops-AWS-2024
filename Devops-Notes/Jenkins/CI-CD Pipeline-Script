-> After you install and log into the jenkins
-> You have to install the below plugins
    -> EclipseTemurin
    -> Docker
    -> Docker pipeline
    -> SonarQube scanner
    -> SonarQube Quality gate
    -> Quality gate
    -> Nodejs
    -> OWASP Dependency-Check
    -> Email-extension plugin
    -> Kubernetes
    -> Kuberntes Client API
    -> Kubernetes Credentials plugin
    -> Kubernetes CLI
    -> Kubernetes Credentials Provider
    -> Kubernetes plugin
    -> AWS Steps
    -> AWS Credentials
    -> Bitbucket

-> You will restart the Jenkins after install the plugins
-> Go to manage Jenkins, click credentials and cofigure below credentials
    docker -> Click username and password, Give username and password and give id name
    Sonarube -> Click secret, Give token which you created in sonarqube and give id name
    Git -> Click username and password, give username and token which you created in github, give id name
    Email -> Click username and password, Give mail-id and email token [To get this email-token you have to go gmail, click manage google account
                  click security and search App password in search bar and click app password and give one name and create
    AWS-> Click AwS, Give access key and secret key

-> Go to manage Jenkins, click configuration tools and install below tools
   JDK-17, Click automatically install, Click Install from adoptium.net and choose latest version
   JDK-11, Click automatically install, Click Install from adoptium.net and choose latest version
   Git, Keep it default
   Sonar-scanner, Click install automatically, Choose latest version
   Nodejs, Give name, Click install automatically
   Dependency check click install automatically and click Install from github.com and choose latest version
   Maven, Give name, Click install automatically and choose latest version 
   Docker, Give name Click install automatically and choose latest version

-> After complete to configure the tools later click the system configuration
   SonarQube-Installition, Give name, Give the Sonar-qube URL and choose the soanr-token credentials id which you have created in credentials
   Extended Email Notification -> Give smtp.gmail.com, Give 465 port, Click Advanced choose mail-id which you created in credentals, Click use SSL
   Email Notification -> Give smtp.gmail.com, click advanced, Give mail and email token which you created before in gmail.

-> To set up the sonar-quality gate. Go to sonarqube, click administation, click configuration, click webhook and give jenkins URL 
       http://54.198.209.63:8080/sonarqube-webhook

pipeline {
    agent any

    tools {
        nodejs 'node22'
    }

    environment {
        DOCKER_IMAGE = "manoj3003/frissly:${BUILD_NUMBER}"
        BIT_REPO_NAME = "frissly-repo1"
        BIT_USERNAME = "manoj7894"
        DEPLOYMENT_FILE_PATH = "Kubernetes/deployment.yml" // Adjust the path if necessary
        SCANNER_HOME = tool 'sonar-scanner'
    }

    stages {
        stage('Remove All Previous Docker Images') {
            steps {
                // Remove all Docker images
                sh 'docker rmi -f $(docker images -a -q) || true'
            }
        }

        stage('Cleanup Old Trivy Reports') {
            steps {
                script {
                    echo "Cleaning up old Trivy reports..."
                    sh '''
                        rm -f trivy.txt
                        rm -f fs-report.html
                    '''
                }
            }
        }

        stage('Get Code') {
            steps {
                git branch: 'frontend', credentialsId: 'Bitbucket_user', url: 'https://manoj7894@bitbucket.org/manojvarmapotthuri/frissly-repo1.git'
            }
        }

        stage('Install Package Dependencies') {
            steps {
                sh "npm install"
            }
        }

        stage('Check for Tests') {
            steps {
                script {
                    def testScriptExists = sh(script: "grep -q '\"test\":' package.json", returnStatus: true) == 0
                    env.TEST_SCRIPT_EXISTS = testScriptExists ? 'true' : 'false'
                }
            }
        }

        stage('Trivy Filesystem Scan') {
            steps {
                script {
                    sh "trivy fs --format table -o fs-report.html ."
                }
            }
        }

        stage('OWASP Scan') {
            when {
                expression {
                    fileExists('package.json')
                }
            }
            steps {
                dependencyCheck additionalArguments: '', odcInstallation: 'DP-Check'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }

        stage('SonarQube') {
            steps {
                withSonarQubeEnv('Sonar_Install') {
                    sh '''$SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=Validate \
                    -Dsonar.projectKey=Validate \
                    -Dsonar.host.url=http://54.173.242.65:9000'''
                }
            }
        }

        stage('Stage V: QualityGates') {
            steps {
                echo "Running Quality Gates to verify the code quality"
                script {
                    timeout(time: 2, unit: 'MINUTES') {
                        def qg = waitForQualityGate()
                        if (qg.status != 'OK') {
                            error "Pipeline aborted due to quality gate failure: ${qg.status}"
                        }
                    }
                }
            }
        }

        stage('Build') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'Docker_id', toolName: 'Docker') {
                        sh "docker build -t ${DOCKER_IMAGE} ."
                    }
                }
            }
        }

        stage('Trivy Image Scan') {
            steps {
                script {
                    sh "trivy image ${DOCKER_IMAGE} > trivy.txt"
                }
            }
        }

        stage('Push') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'Docker_id', toolName: 'Docker') {
                        sh "docker push ${DOCKER_IMAGE}"
                    }
                }
            }
        }

        stage('Update Deployment File') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'Bitbucket_user', usernameVariable: 'BIT_USERNAME', passwordVariable: 'BIT_PASSWORD')]) {
                    script {
                        sh '''
                            git config user.email "jenkins@example.com"
                            git config user.name "Jenkins"
                        '''

                        sh 'git checkout frontend'
                        sh 'cat ${DEPLOYMENT_FILE_PATH}'

                        sh '''
                            sed -i "s|image: manoj3003/frissly:[^[:space:]]*|image: ${DOCKER_IMAGE}|g" ${DEPLOYMENT_FILE_PATH}
                        '''

                        sh '''
                            if git diff --quiet; then
                                echo "No changes detected in ${DEPLOYMENT_FILE_PATH}"
                            else
                                git add ${DEPLOYMENT_FILE_PATH}  # Only add the deployment file
                                git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                                git push -f https://$BIT_USERNAME:$BIT_PASSWORD@bitbucket.org/manojvarmapotthuri/frissly-repo1.git frontend
                            fi
                        '''
                    }
                }
            }
        }

        stage('Install Ingress Controller') {
            steps {
                script {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'AWS_Credetilas_id']]) {
                        sh '''
                            # Update kubeconfig to use EKS
                            aws eks --region us-east-1 update-kubeconfig --name eks-1

                            # Check and create the ingress-nginx namespace if it doesn't exist
                            if ! kubectl get namespace ingress-nginx; then
                                kubectl create namespace ingress-nginx
                            else
                                echo "Namespace 'ingress-nginx' already exists."
                            fi

                            # Apply Ingress Nginx Controller in ingress-nginx namespace
                            kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/cloud/deploy.yaml --namespace ingress-nginx
                        '''
                    }
                }
            }
        }

        stage('Deploy to EKS') {
            steps {
                script {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'AWS_Credetilas_id']]) {
                        // Configure kubectl with EKS credentials
                        sh '''
                            aws eks --region us-east-1 describe-cluster --name eks-1 --query cluster.status
                            aws eks --region us-east-1 update-kubeconfig --name eks-1

                            # Create necessary namespaces
                            if ! kubectl get namespace webapps; then
                                kubectl create namespace webapps
                            else
                                echo "Namespace 'webapps' already exists."
                            fi

                            # Create the Docker registry secret if it doesn't exist
                            if ! kubectl get secret regcred --namespace=webapps; then
                                kubectl create secret docker-registry regcred \
                                    --docker-server=https://index.docker.io/v1/ \
                                    --docker-username=manoj3003 \
                                    --docker-password=Varma_3003 \
                                    --namespace=webapps
                            else
                                echo "Secret 'regcred' already exists in 'webapps' namespace."
                            fi

                            # Apply the autoscaling metrics
                            kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml -n kube-system

                            # Download EFS CSI Driver
                            kubectl apply -k "github.com/kubernetes-sigs/aws-efs-csi-driver/deploy/kubernetes/overlays/stable/ecr"

                            # Apply other resources
                            kubectl apply -f Kubernetes/pv.yml -n webapps
                            kubectl apply -f Kubernetes/pvc.yml -n webapps
                            kubectl apply -f ${DEPLOYMENT_FILE_PATH} -n webapps
                            kubectl apply -f Kubernetes/service.yml -n webapps
                            kubectl apply -f Kubernetes/autoscaling.yml -n webapps
                            kubectl apply -f Kubernetes/ingress.yml -n webapps
                        '''
                        sleep 20
                    }
                }
            }
        }

        stage('Verify the Deployment') {
            steps {
                script {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'AWS_Credetilas_id']]) {
                        sh '''
                            kubectl get pods -n webapps
                            kubectl get svc -n webapps
                            kubectl get pvc -n webapps
                            kubectl get pv -n webapps
                            kubectl get hpa -n webapps
                            kubectl get ingress -n webapps
                        '''
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                def jobName = 'Frissly'
                def buildNumber = env.BUILD_NUMBER
                def pipelineStatus = currentBuild.result ?: 'UNKNOWN'
                def bannerColor = pipelineStatus.toUpperCase() == 'SUCCESS' ? 'green' : 'red'

                def body = """<html>
                                <body>
                                    <div style="border: 4px solid ${bannerColor}; padding: 10px;">
                                        <h2>${jobName} - Build ${buildNumber}</h2>
                                        <div style="background-color: ${bannerColor}; padding: 10px;">
                                            <h3 style="color: white;">Pipeline Status: ${pipelineStatus.toUpperCase()}</h3>
                                        </div>
                                        <p>Check the <a href="${BUILD_URL}">console output</a>.</p> 
                                    </div>
                                </body>
                            </html>"""

                emailext(
                    subject: "${jobName} - Build ${buildNumber} - ${pipelineStatus.toUpperCase()}",
                    body: body,
                    to: 'manojvarmapotthutri@gmail.com',
                    from: 'jenkins@example.com',
                    replyTo: 'jenkins@example.com',
                    attachmentsPattern: 'trivy.txt',
                    mimeType: 'text/html',
                    attachmentPattern: 'fs-report.html'
                )
            }
        }
    }
}


# Using With RBAC
-> After complete to create the role and token. copy the toke and paste the token in your jenkins credentials on secret text and give id name

pipeline {
    agent any

    tools {
        nodejs 'node22'
    }

    environment {
        DOCKER_IMAGE = "manoj3003/frissly:${BUILD_NUMBER}"
        BIT_REPO_NAME = "frissly-repo1"
        BIT_USERNAME = "manoj7894"
        DEPLOYMENT_FILE_PATH = "Kubernetes/deployment.yml" // Adjust the path if necessary
        SCANNER_HOME = tool 'sonar-scanner'
    }

    stages {
        stage('Remove All Previous Docker Images') {
            steps {
                // Remove all Docker images
                sh 'docker rmi -f $(docker images -a -q) || true'
            }
        }

        stage('Cleanup Old Trivy Reports') {
            steps {
                script {
                    echo "Cleaning up old Trivy reports..."
                    sh '''
                        rm -f trivy.txt
                        rm -f fs-report.html
                    '''
                }
            }
        }

        stage('Get Code') {
            steps {
                git branch: 'frontend', credentialsId: 'Bitbucket_user', url: 'https://manoj7894@bitbucket.org/manojvarmapotthuri/frissly-repo1.git'
            }
        }

        stage('Install Package Dependencies') {
            steps {
                sh "npm install"
            }
        }

        stage('Check for Tests') {
            steps {
                script {
                    def testScriptExists = sh(script: "grep -q '\"test\":' package.json", returnStatus: true) == 0
                    env.TEST_SCRIPT_EXISTS = testScriptExists ? 'true' : 'false'
                }
            }
        }

        stage('Trivy Filesystem Scan') {
            steps {
                script {
                    sh "trivy fs --format table -o fs-report.html ."
                }
            }
        }

        stage('OWASP Scan') {
            when {
                expression {
                    fileExists('package.json')
                }
            }
            steps {
                dependencyCheck additionalArguments: '', odcInstallation: 'DP-Check'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }

        stage('SonarQube') {
            steps {
                withSonarQubeEnv('Sonar_Install') {
                    sh '''$SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=Validate \
                    -Dsonar.projectKey=Validate \
                    -Dsonar.host.url=http://54.173.242.65:9000'''
                }
            }
        }

        stage('Stage V: QualityGates') {
            steps {
                echo "Running Quality Gates to verify the code quality"
                script {
                    timeout(time: 2, unit: 'MINUTES') {
                        def qg = waitForQualityGate()
                        if (qg.status != 'OK') {
                            error "Pipeline aborted due to quality gate failure: ${qg.status}"
                        }
                    }
                }
            }
        }

        stage('Build') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'Docker_id', toolName: 'Docker') {
                        sh "docker build -t ${DOCKER_IMAGE} ."
                    }
                }
            }
        }

        stage('Trivy Image Scan') {
            steps {
                script {
                    sh "trivy image ${DOCKER_IMAGE} > trivy.txt"
                }
            }
        }

        stage('Push') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'Docker_id', toolName: 'Docker') {
                        sh "docker push ${DOCKER_IMAGE}"
                    }
                }
            }
        }

        stage('Update Deployment File') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'Bitbucket_user', usernameVariable: 'BIT_USERNAME', passwordVariable: 'BIT_PASSWORD')]) {
                    script {
                        sh '''
                            git config user.email "jenkins@example.com"
                            git config user.name "Jenkins"
                        '''
                        
                        sh 'git checkout frontend'
                        sh 'cat ${DEPLOYMENT_FILE_PATH}'
                        
                        sh '''
                            sed -i "s|image: manoj3003/frissly:[^[:space:]]*|image: ${DOCKER_IMAGE}|g" ${DEPLOYMENT_FILE_PATH}
                        '''
                        
                        sh '''
                            if git diff --quiet; then
                                echo "No changes detected in ${DEPLOYMENT_FILE_PATH}"
                            else
                                git add ${DEPLOYMENT_FILE_PATH}  # Only add the deployment file
                                git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                                git push -f https://$BIT_USERNAME:$BIT_PASSWORD@bitbucket.org/manojvarmapotthuri/frissly-repo1.git frontend
                            fi
                        '''
                    }
                }
            }
        }

        stage('Install Ingress Controller') {
            steps {
                script {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'AWS_Credetilas_id']]) {
                        sh '''
                            # Update kubeconfig to use EKS
                            aws eks --region us-east-1 update-kubeconfig --name eks-1

                            # Check and create the ingress-nginx namespace if it doesn't exist
                            if ! kubectl get namespace ingress-nginx; then
                                kubectl create namespace ingress-nginx
                            else
                                echo "Namespace 'ingress-nginx' already exists."
                            fi

                            # Apply Ingress Nginx Controller in ingress-nginx namespace
                            kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/cloud/deploy.yaml --namespace ingress-nginx
                        '''
                    }
                }
            }
        }

        stage('Deploy to EKS') {
            steps {
                script {
                    withKubeConfig(caCertificate: '', clusterName: 'eks-1', contextName: '', credentialsId: 'k8s_token', namespace: 'webapps', restrictKubeConfigAccess: false, serverUrl: 'https://8BE4030C8B4DAB2208A9AA58827505E7.gr7.ap-south-1.eks.amazonaws.com') {
                        // Now apply the deployment and service in the webapps namespace
                        sh 'kubectl apply -f Kubernetes/pv.yml -n webapps'
                        sh 'kubectl apply -f Kubernetes/pvc.yml -n webapps'
                        sh 'kubectl apply -f ${DEPLOYMENT_FILE_PATH} -n webapps'
                        sh 'kubectl apply -f Kubernetes/service.yml -n webapps'
                        sleep 20
                    }
                }
            }
        }

        stage('Verify the Deployment') {
            steps {
                script {
                    withKubeConfig(caCertificate: '', clusterName: 'eks-1', contextName: '', credentialsId: 'k8s_token', namespace: 'webapps', restrictKubeConfigAccess: false, serverUrl: 'https://8BE4030C8B4DAB2208A9AA58827505E7.gr7.ap-south-1.eks.amazonaws.com') {
                        sh '''
                            kubectl get pods -n webapps
                            kubectl get svc -n webapps
                            kubectl get pv -n webapps
                            kubectl get pvc -n webapps
                        '''
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                def jobName = 'Frissly'
                def buildNumber = env.BUILD_NUMBER
                def pipelineStatus = currentBuild.result ?: 'UNKNOWN'
                def bannerColor = pipelineStatus.toUpperCase() == 'SUCCESS' ? 'green' : 'red'

                def body = """<html>
                                <body>
                                    <div style="border: 4px solid ${bannerColor}; padding: 10px;">
                                        <h2>${jobName} - Build ${buildNumber}</h2>
                                        <div style="background-color: ${bannerColor}; padding: 10px;">
                                            <h3 style="color: white;">Pipeline Status: ${pipelineStatus.toUpperCase()}</h3>
                                        </div>
                                        <p>Check the <a href="${BUILD_URL}">console output</a>.</p> 
                                    </div>
                                </body>
                            </html>"""

                emailext(
                    subject: "${jobName} - Build ${buildNumber} - ${pipelineStatus.toUpperCase()}",
                    body: body,
                    to: 'manojvarmapotthutri@gmail.com',
                    from: 'jenkins@example.com',
                    replyTo: 'jenkins@example.com',
                    attachmentsPattern: 'trivy.txt',
                    mimeType: 'text/html',
                    attachmentPattern: 'fs-report.html'
                )
            }
        }
    }
}



   

