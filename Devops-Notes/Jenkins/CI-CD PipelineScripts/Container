pipeline {
    agent any

    tools {
        nodejs 'node22'
    }

    environment {
        DOCKER_IMAGE = "frissly-admin-ui:${BUILD_NUMBER}"
        CONTAINER_NAME = "con-frissly-admin-ui"
        SCANNER_HOME = tool 'sonar-scanner'
        EMAIL_RECIPIENT = "varmapotthuri4@gmail.com" // Add your email here
        SONARQUBE_REPORT_PATH = "sonar-report.txt"  // SonarQube report path
        SONARQUBE_TOKEN = credentials('sonar_token') // Set this as a Jenkins credential (use your SonarQube token)
    }

    stages {
        stage('Cleanup Workspace') {
            steps {
                script {
                    echo "Cleaning up the workspace..."
                    cleanWs() // Cleans up the entire workspace directory.
                }
            }
        }

        stage('Cleanup Old Trivy Reports') {
            steps {
                script {
                    echo "Cleaning up old Trivy reports..."
                    sh '''
                        rm -f trivy.txt
                        rm -f fs-report.html
                    '''
                }
            }
        }

        stage('Get Code') {
            steps {
                git branch: 'cms-dev', credentialsId: 'Bitbucket_user', url: 'https://manojvarma.potthuri@bitbucket.org/frissly999/frissly-admin-ui.git'
            }
        }

        stage('Install Package Dependencies') {
            steps {
                sh "npm install"
            }
        }

        stage('Check for Tests') {
            steps {
                script {
                    def testScriptExists = sh(script: "grep -q '\"test\":' package.json", returnStatus: true) == 0
                    env.TEST_SCRIPT_EXISTS = testScriptExists ? 'true' : 'false'
                }
            }
        }

        stage('Trivy Filesystem Scan') {
            steps {
                script {
                    sh "trivy fs --format table -o fs-report.html ."
                }
            }
        }

        stage('OWASP Scan') {
            when {
                expression {
                    fileExists('package.json')
                }
            }
            steps {
                dependencyCheck additionalArguments: '', odcInstallation: 'DP-Check'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }
        
        stage('SonarQube') {
            steps {
                withSonarQubeEnv('Sonar_Install') {
                    sh '''$SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=frissly-admin-ui \
                    -Dsonar.projectKey=frissly-admin-ui \
                    -Dsonar.host.url=http://15.206.69.243:9000'''
                }
            }
        }

        stage('Quality Gates') {
            steps {
                echo "Running Quality Gates to verify the code quality"
                script {
                    timeout(time: 2, unit: 'MINUTES') {
                        def qg = waitForQualityGate()
                        if (qg.status != 'OK') {
                            error "Pipeline aborted due to quality gate failure: ${qg.status}"
                        }
                        writeFile file: SONARQUBE_REPORT_PATH, text: qg.status
                    }
                }
            }
        }

        stage('Remove Previous Docker Images and Containers') {
            steps {
                sh '''
                    docker ps -aq --filter "name=${CONTAINER_NAME}" | xargs -I {} docker stop {} || true
                    docker ps -aq --filter "name=${CONTAINER_NAME}" | xargs -I {} docker rm {} || true
                    docker images --filter "reference=frissly-admin-ui*" -q | xargs -I {} docker rmi -f {} || true
                    docker builder prune -f || true
                    docker container prune -f || true
                    docker network prune -f || true
                '''
            }
        }

        stage('Build') {
            steps {
                sh 'docker build -t ${DOCKER_IMAGE} .'
            }
        }

        stage('Trivy Image Scan') {
            steps {
                script {
                    sh "trivy image ${DOCKER_IMAGE} > trivy.txt"
                }
            }
        }

        stage('Build Docker run') {
            steps {                                 
                sh 'docker run -itd --name ${CONTAINER_NAME} -p 8000:80 ${DOCKER_IMAGE}'
            }
        }
    }

    post {
        always {
            script {
                emailext (
                    to: "${EMAIL_RECIPIENT}",
                    subject: "Frissly-Admin-UI Build #${BUILD_NUMBER} - Reports",
                    body: """
                        The build #${BUILD_NUMBER} has completed. Attached are the generated reports:

                        - Trivy scan report
                        - OWASP Dependency Check report
                        - SonarQube Quality Gate report

                        Please review the attachments for further details.
                    """,
                    attachmentsPattern: "trivy.txt, fs-report.html, dependency-check-report.xml, ${SONARQUBE_REPORT_PATH}"
                )
            }
        }

        success {
            emailext (
                to: "${EMAIL_RECIPIENT}",
                subject: "Frissly-Admin-UI Build #${BUILD_NUMBER} - Successful",
                body: """
                    The build #${BUILD_NUMBER} has completed successfully.

                    All tests passed, and security scans are clean.
                """
            )
        }

        failure {
            emailext (
                to: "${EMAIL_RECIPIENT}",
                subject: "Frissly-Admin-UI Build #${BUILD_NUMBER} - Failed",
                body: """
                    The build #${BUILD_NUMBER} has failed.

                    Please check the build logs for more details.
                """
            )
        }
        cleanup {
            deleteDir() // This will delete the workspace directory after the pipeline execution
        }
    }
}
