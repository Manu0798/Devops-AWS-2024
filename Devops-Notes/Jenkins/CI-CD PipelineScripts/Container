pipeline {
    agent any

    tools {
        nodejs 'node22'
    }

    environment {
        DOCKER_IMAGE = "frissly-backend:${BUILD_NUMBER}"
        CONTAINER_NAME = "con-frissly-backend"
        SCANNER_HOME = tool 'sonar-scanner'
    }

    stages {
        stage('Cleanup Old Trivy Reports') {
            steps {
                script {
                    echo "Cleaning up old Trivy reports..."
                    sh '''
                        rm -f trivy.txt
                        rm -f fs-report.html
                    '''
                }
            }
        }

        stage('Get Code') {
            steps {
                git branch: 'cms-dev', credentialsId: 'Bitbucket_user', url: 'https://manojvarma.potthuri@bitbucket.org/frissly999/frissly-backend.git'
            }
        }

        stage('Install Package Dependencies') {
            steps {
                sh "npm install"
            }
        }

        stage('Check for Tests') {
            steps {
                script {
                    def testScriptExists = sh(script: "grep -q '\"test\":' package.json", returnStatus: true) == 0
                    env.TEST_SCRIPT_EXISTS = testScriptExists ? 'true' : 'false'
                }
            }
        }

        stage('Trivy Filesystem Scan') {
            steps {
                script {
                    sh "trivy fs --format table -o fs-report.html ."
                }
            }
        }

        stage('OWASP Scan') {
            when {
                expression {
                    fileExists('package.json')
                }
            }
            steps {
                dependencyCheck additionalArguments: '', odcInstallation: 'DP-Check'
                dependencyCheckPublisher pattern: '/dependency-check-report.xml'  // Updated pattern
            }
        }

        stage('SonarQube') {
            steps {
                withSonarQubeEnv('Sonar_Install') {
                    sh '''$SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=frissly-backend \
                    -Dsonar.projectKey=frissly-backend \
                    -Dsonar.host.url=http://15.206.69.243:9000'''
                }
            }
        }

        stage('Stage V: QualityGates') {
            steps {
                echo "Running Quality Gates to verify the code quality"
                script {
                    timeout(time: 2, unit: 'MINUTES') {
                        def qg = waitForQualityGate()
                        if (qg.status != 'OK') {
                            error "Pipeline aborted due to quality gate failure: ${qg.status}"
                        }
                    }
                }
            }
        }

        stage('Remove Previous Docker Images and Containers') {
            steps {
                // Stop and remove any running container associated with the image
                sh '''
                    docker ps -aq --filter "name=${CONTAINER_NAME}" | xargs -I {} docker stop {} || true
                    docker ps -aq --filter "name=${CONTAINER_NAME}" | xargs -I {} docker rm {} || true
                '''

                // Remove all containers (even stopped ones) to ensure images can be removed
                sh '''
                    docker ps -aq --filter "ancestor=frissly-backend" | xargs -I {} docker rm {} || true
                '''

                // Remove all images tagged with frissly-backend
                sh '''
                    docker images --filter "reference=frissly-backend*" -q | xargs -I {} docker rmi -f {} || true
                '''

                // Optionally, clean up Docker volumes related to the removed containers
                sh '''
                    docker volume ls -q --filter "dangling=true" | xargs -I {} docker volume rm {} || true
                '''

                // Clean up Docker build cache
                sh 'docker builder prune -f || true'

                // Clean up stopped containers
                sh 'docker container prune -f || true'

                // Clean up unused networks
                sh 'docker network prune -f || true'
            }
        }

        stage('Build') {
            steps {
                sh 'docker build -t ${DOCKER_IMAGE} .'
            }
        }

        stage('Trivy Image Scan') {
            steps {
                script {
                    sh "trivy image ${DOCKER_IMAGE} > trivy.txt"
                }
            }
        }

        stage('Build Docker run') {
            steps {                                 
                sh 'docker run -itd --name ${CONTAINER_NAME} -p 8081:8081 ${DOCKER_IMAGE}'
            }
        }
    }

    post {
        always {
            script {
                def jobName = 'Frissly'
                def buildNumber = env.BUILD_NUMBER
                def pipelineStatus = currentBuild.result ?: 'UNKNOWN'
                def bannerColor = pipelineStatus.toUpperCase() == 'SUCCESS' ? 'green' : 'red'

                def body = """<html>
                                <body>
                                    <div style="border: 4px solid ${bannerColor}; padding: 10px;">
                                        <h2>${jobName} - Build ${buildNumber}</h2>
                                        <div style="background-color: ${bannerColor}; padding: 10px;">
                                            <h3 style="color: white;">Pipeline Status: ${pipelineStatus.toUpperCase()}</h3>
                                        </div>
                                        <p>Check the <a href="${BUILD_URL}">console output</a>.</p> 
                                    </div>
                                </body>
                            </html>"""

                emailext(
                    subject: "${jobName} - Build ${buildNumber} - ${pipelineStatus.toUpperCase()}",
                    body: body,
                    to: 'varmapotthuri4@gmail.com',
                    from: 'jenkins@example.com',
                    replyTo: 'jenkins@example.com',
                    attachmentsPattern: 'trivy.txt',
                    mimeType: 'text/html',
                    attachmentPattern: 'fs-report.html'
                )
            }
        }

        cleanup {
            deleteDir() // This will delete the workspace directory after the pipeline execution
        }
    }
}
