# What is volumes in Kubernets
A volume's lifecycle is tied to the pod, not to individual containers. This means that if a container crashes and restarts, the volume still retains its data — as long as the pod is alive.

# Types of Volumes:

| Type                          | Purpose                                                                                            |
| ----------------------------- | -------------------------------------------------------------------------------------------------- |
| `emptyDir`                    | Temporary storage **shared between containers** in a Pod. Data is deleted when the pod is removed. |
| `hostPath`                    | Mounts a file or folder from the **host node’s filesystem** into the pod.                          |
| `persistentVolumeClaim (PVC)` | Used to request **persistent storage** from external systems (EBS, NFS, etc.)                      |
| `configMap` / `secret`        | Mounts Kubernetes config/secrets into containers as **files**.                                     |
| `nfs`                         | Connects to **external NFS storage** for shared data between pods.                                 |
| `ephemeral`                   | New in Kubernetes 1.19+, lightweight temporary storage for short-lived workloads.                  |



🔹 What is emptyDir?
-> When we use the emptyDir volume type, the data is stored temporarily.
-> If the pod is deleted or the node is restarted, the data will be lost.
-> You cannot persist or share data across multiple pods or nodes.
⚠️ Not recommended for critical or long-lived data.

🔹 What is hostPath?
-> The hostPath volume type mounts a file or directory from the node’s local filesystem into the pod.
-> If the pod is restarted, the data can still be retrieved — as long as it's scheduled on the same node.    [[means data will store in node whereever pod is running]
-> But if the node is deleted or unavailable, the data will be lost.
-> You cannot share data across nodes, so it is not recommended for production-grade persistent storage.

🔸 Note:
The above two types (emptyDir, hostPath) are considered ephemeral:
-> If the pod or node is deleted or restarted, the associated data is lost.
-> These volumes are suitable only for temporary data or caching.

🔹 What is a Persistent Volume (PV/PVC)?
-> When we use a PersistentVolumeClaim (PVC), the data is stored in a persistent backend (like AWS EBS, NFS, etc.).
-> Even if the pod is deleted or moved to another node, the data can be retrieved.
-> It supports data persistence across restarts and can also be shared between multiple pods (depending on the storage type).
✅ Recommended for production use and important data.



# Kuberbets offers three components to persistence the data
-> Persistence volumes
-> Persistence volume claims
-> Storage class

# What is Persistence volumes(PV)
-> A PersistentVolume is a piece of storage in the Kubernetes cluster that has been provisioned by an administrator or dynamically provisioned using stoage class

# What is Persistence volume claims
-> A PersistentVolumeClaim is a request for storage by a user or developer.
-> It is a resource object in the Kubernetes API that allows a Pod to access a piece of storage from a PersistentVolume (PV).

# What is storage class 
-> Defines how to dynamically provision PersistentVolumes.
-> Automatically creates PVs when PVCs are requested.

kubectl api-resources | grep storage    -> To get the api version  [false means storage class not created in any namespace those available to the entire cluster
kubectl get sc  -> to see storage class

🔍 Summary Sentence
Kubernetes uses PersistentVolumes (PV), PersistentVolumeClaims (PVC), and StorageClasses to manage and persist data beyond the lifecycle of a pod or container.




✅ In Persistent Volume Claims (PVC), Kubernetes Supports These Access Modes:
🔹 1. ReadWriteOnce (RWO)   --> Recommend for production
The volume can be mounted as read-write by a single node.
✅ Best for: Pods running on the same node.
❌ If pods run on different nodes, they cannot access the volume at the same time.
💡 Most AWS EBS volumes use this access mode.

🔹 2. ReadWriteMany (RWX)
The volume can be mounted as read-write by multiple nodes at the same time.
✅ Best for: Shared data across pods on different nodes.
💡 Used with network-based volumes like NFS, EFS (AWS), or CSI drivers that support RWX.

🔹 3. ReadOnlyMany (ROX)
The volume can be mounted as read-only by multiple nodes at the same time.
✅ Good for serving static content (like config, images, etc.).
❌ You cannot write to the volume — only read is allowed.

🔹 4. ReadWriteOncePod (RWO-Pod) — Introduced in Kubernetes 1.22+
The volume can be mounted as read-write by a single pod only, even if there are multiple pods on the same node.
✅ Useful for strong isolation — only one pod in the entire cluster can read/write.
💡 Ensures that no other pod (even on the same node) can accidentally access the volume.


| Access Mode        | Mounted By   | Writable? | Use Case Example                  |
| ------------------ | ------------ | --------- | --------------------------------- |
| `ReadWriteOnce`    | One Node     | ✅ Yes     | EBS, local storage (single-node)  |
| `ReadWriteMany`    | Many Nodes   | ✅ Yes     | NFS, EFS, shared workloads        |
| `ReadOnlyMany`     | Many Nodes   | ❌ No      | Static config, media files        |
| `ReadWriteOncePod` | One Pod Only | ✅ Yes     | Leader election, strict isolation |




| **Concept**         | **Option**             | **What It Means**                                                                  |
| ------------------- | ---------------------- | ---------------------------------------------------------------------------------- |
| `volumeBindingMode` | `Immediate`            | PV is bound to PVC **immediately** after PVC creation                              |
|                     | `WaitForFirstConsumer` | PV is bound **only when a Pod is scheduled** using the PVC                         |
| `reclaimPolicy`     | `Delete`               | When PVC is deleted, the **PV and storage are also deleted**                       |
|                     | `Retain`               | When PVC is deleted, the **PV is retained** (you must manually delete or reuse it) |



🟢 In Production
-> Use StorageClass to dynamically provision EBS volumes (no need to create manually).

# vi storage.yml

apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: ebs-sc
provisioner: kubernetes.io/aws-ebs
parameters:
  type: gp3
  fsType: ext4
reclaimPolicy: Retain
volumeBindingMode: Immediate

-> kubectl get storageclass

# vi pvc.yml

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ebs-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: ebs-sc   # or use "gp2" or "gp3" if default exists

# pod.yml

apiVersion: v1
kind: Pod
metadata:
  name: ebs-pod
spec:
  containers:
    - name: web
      image: nginx
      volumeMounts:
        - name: webdata
          mountPath: /usr/share/nginx/html
  volumes:
    - name: webdata
      persistentVolumeClaim:
        claimName: ebs-pvc







# Must read to understand

# Using EFS
-> First you create one EFS file in AWS
-> Click create filesystem, give file name, choose the VPC wherever your cluster is running
-> After create the files and click that, click network in below and click manage and choose the Security group on whichever SG yourc cluster is running and enable port number 2049
-> Finally you will use below pv and pvc in deployement

# To Install the EFS CSI Driver 
-> kubectl apply -k "github.com/kubernetes-sigs/aws-efs-csi-driver/deploy/kubernetes/overlays/stable/ecr"

# pv.yml

apiVersion: v1
kind: PersistentVolume
metadata:
  name: efs-pv
spec:
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteMany  # Allows multiple pods to access the volume
  persistentVolumeReclaimPolicy: Retain
  storageClassName: efs-sc
  csi:
    driver: efs.csi.aws.com
    volumeHandle: fs-0ba7e1f0d3bb627f3  # Replace with your EFS file system ID

pvc.yml

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: efs-pvc
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 5Gi
  storageClassName: efs-sc



# Data store with single node without using EBS 

# Install the AWS EBS CSI Driver Manually
-> helm repo update
-> kubectl apply -k "github.com/kubernetes-sigs/aws-ebs-csi-driver/deploy/kubernetes/overlays/stable/ecr"
-> kubectl get pods -n kube-system -l app.kubernetes.io/name=aws-ebs-csi-driver   --> Verify Installation

vi pv.yml

apiVersion: v1
kind: PersistentVolume
metadata:
  name: my-pv
spec:
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: my-storage-class
  hostPath:
    path: /mnt/ravi  # Directory path on the host machine # This path automatically created in your workernode

Note: the above files working like as a host path means when delete the node the automatically data will be deleted.


vi pvc.yml

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: yelp-camp-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 3Gi
  storageClassName: my-storage-class    # Reference to your StorageClass


# This way is not working using EBS
-> Create one EBS volume

pv.yml

apiVersion: v1
kind: PersistentVolume
metadata:
  name: my-pv
spec:
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: ebs-sc
  csi:
    driver: ebs.csi.aws.com
    volumeHandle: vol-0e7bc9339916cc688  # Replace with your EBS volume ID or leave empty for dynamic provisioning


pvc.yml

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: my-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: ebs-sc

Note: when i was using the above above data i am getting the below errors
Events:
  Type     Reason              Age                From                     Message
  ----     ------              ----               ----                     -------
  Normal   Scheduled           32s                default-scheduler        Successfully assigned default/my-app-deployment-74dfcdd97c-frwcq to ip-10-0-1-113.ec2.internal
  Warning  FailedAttachVolume  13s (x5 over 30s)  attachdetach-controller  AttachVolume.Attach failed for volume "my-pv" : volume attachment is being deleted

# Try with sc

sc.yml

apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: ebs-sc
provisioner: kubernetes.io/aws-ebs  # Ensure the correct provisioner
parameters:
  type: gp3  # Change to gp3 for better performance
  fsType: ext4


pv.yml

apiVersion: v1
kind: PersistentVolume
metadata:
  name: my-new-pv  # Change the name to avoid conflict
spec:
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: ebs-sc
  csi:
    driver: ebs.csi.aws.com
    volumeHandle: vol-0e7bc9339916cc688  # Replace with your EBS volume ID

pvc.yml

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: my-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: ebs-sc

Note: When i was using the above the data i am getting the below error
Events:
  Type     Reason              Age                     From                     Message
  ----     ------              ----                    ----                     -------
  Normal   Scheduled           3m26s                   default-scheduler        Successfully assigned default/my-app-deployment-74dfcdd97c-qr88f to ip-10-0-1-177.ec2.internal
  Warning  FailedAttachVolume  2m55s (x25 over 3m24s)  attachdetach-controller  AttachVolume.Attach failed for volume "my-new-pv" : rpc error: code = Internal desc = Could not attach volume "vol-0e7bc9339916cc688" to node "i-0253a3ba88e45c405": error listing AWS instances: operation error EC2: DescribeInstances, get identity: get credentials: failed to refresh cached credentials, no EC2 IMDS role found, operation error ec2imds: GetMetadata, failed to get rate limit token, retry quota exceeded, 0 available, 5 requested






https://youtu.be/LPy6Q-q1MVQ?si=PTgxiHXa-CimjB2Q
https://youtu.be/1qFMeAbVc-Y?si=0Vxuoujr8Whg79iN
