--> You have install below script in uat, stg, prod

#!/bin/bash

# Update package list
echo "Updating package list..."
sudo apt-get update -y



# Monitoring Tools
# Update the packages
sudo apt update && sudo apt upgrade -y
sudo apt install -y net-tools wget curl unzip apt-transport-https

# Variables
NODE_EXPORTER_VERSION="1.9.0"
# PROMTAIL_VERSION="latest"

# Install Node Exporter
wget https://github.com/prometheus/node_exporter/releases/download/v$NODE_EXPORTER_VERSION/node_exporter-$NODE_EXPORTER_VERSION.linux-amd64.tar.gz
tar -xvf node_exporter-$NODE_EXPORTER_VERSION.linux-amd64.tar.gz
rm node_exporter-$NODE_EXPORTER_VERSION.linux-amd64.tar.gz
sudo mkdir -p /opt/node_exporter
sudo mv node_exporter-$NODE_EXPORTER_VERSION.linux-amd64 /opt/node_exporter
sudo useradd --no-create-home --shell /bin/false node_exporter
sudo chown -R node_exporter:node_exporter /opt/node_exporter/
sudo chmod -R 755 /opt/node_exporter/

cat <<EOF | sudo tee /etc/systemd/system/node_exporter.service
[Unit]
Description=Node Exporter
After=network.target

[Service]
User=node_exporter
Group=node_exporter
Type=simple
ExecStart=/opt/node_exporter/node_exporter-$NODE_EXPORTER_VERSION.linux-amd64/node_exporter

[Install]
WantedBy=multi-user.target
EOF

sudo systemctl daemon-reload
sudo systemctl enable node_exporter
sudo systemctl start node_exporter


# After complete the install for docker metrics you will execute the below commands

-> sudo vi /etc/docker/daemon.json

{
  "metrics-addr": "0.0.0.0:9323",
  "experimental": true
}

-> sudo systemctl daemon-reload
-> sudo systemctl restart docker
-> sudo systemctl status docker
-> curl http://13.235.242.134:9323/metrics
-> After complete above you install docker containers
-> For docker logs we will look at loki-protail file





# You will install below script in Monitoring server for promethous, grafana, loki and promtail
#!/bin/bash

# Update package list
echo "Updating package list..."
sudo apt-get update -y

# Install Java
echo "Installing Java..."
sudo apt-get install -y fontconfig openjdk-17-jre

# Monitoring Tools
echo "Installing monitoring tools..."
sudo apt-get update && sudo apt-get upgrade -y
sudo apt-get install -y net-tools wget curl unzip apt-transport-https

# Install Prometheus
echo "Installing Prometheus..."
wget https://github.com/prometheus/prometheus/releases/download/v3.2.1/prometheus-3.2.1.linux-amd64.tar.gz
tar -xvf prometheus-3.2.1.linux-amd64.tar.gz
rm prometheus-3.2.1.linux-amd64.tar.gz
sudo mkdir -p /opt/prometheus
sudo mv prometheus-3.2.1.linux-amd64 /opt/prometheus/
sudo useradd --no-create-home --shell /bin/false prometheus
sudo mkdir /var/lib/prometheus

# Configure Prometheus alert rules
echo "Configuring Prometheus alert rules..."
cat <<EOF | sudo tee /opt/prometheus/prometheus-3.2.1.linux-amd64/alert_rules.yml
groups:
  - name: alert_rules
    rules:
      - alert: InstanceDown
        expr: up == 0
        for: 1m
        labels:
          severity: critical
        annotations:
          summary: Endpoint {{ \$labels.instance }} down
          description: "{{ \$labels.instance }} of job {{ \$labels.job }} has been down for more than 1 minute."

      - alert: WebsiteDown
        expr: probe_success == 0
        for: 1m
        labels:
          severity: critical
        annotations:
          summary: Website down
          description: The website at {{ \$labels.instance }} is down.

      - alert: HostOutOfMemory
        expr: (node_memory_MemAvailable / node_memory_MemTotal * 100) < 25
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: Host out of memory (instance {{ \$labels.instance }})
          description: |-
            Node memory is filling up (< 25% left)
              VALUE = {{ \$value }}
              LABELS: {{ \$labels }}

      - alert: HostOutOfDiskSpace
        expr: (node_filesystem_avail{mountpoint="/"} * 100) / node_filesystem_size{mountpoint="/"} < 50
        for: 1s
        labels:
          severity: warning
        annotations:
          summary: Host out of disk space (instance {{ \$labels.instance }})
          description: |-
            Disk is almost full (< 50% left)
              VALUE = {{ \$value }}
              LABELS: {{ \$labels }}

      - alert: HostHighCpuLoad
        expr: (1 - avg by (instance) (rate(node_cpu_seconds_total{mode="idle"}[5m]))) * 100 > 80
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: Host high CPU load (instance {{ \$labels.instance }})
          description: |-
            CPU load is > 80%
              VALUE = {{ \$value }}
              LABELS: {{ \$labels }}

      - alert: ServiceUnavailable
        expr: up{job="node_exporter"} == 0
        for: 2m
        labels:
          severity: critical
        annotations:
          summary: Service Unavailable (instance {{ \$labels.instance }})
          description: |-
            The service {{ \$labels.job }} is not available
              VALUE = {{ \$value }}
              LABELS: {{ \$labels }}

      - alert: HighMemoryUsage
        expr: (node_memory_Active / node_memory_MemTotal) * 100 > 90
        for: 10m
        labels:
          severity: critical
        annotations:
          summary: High Memory Usage (instance {{ \$labels.instance }})
          description: |-
            Memory usage is > 90%
              VALUE = {{ \$value }}
              LABELS: {{ \$labels }}

      - alert: FileSystemFull
        expr: (node_filesystem_avail / node_filesystem_size) * 100 < 10
        for: 5m
        labels:
          severity: critical
        annotations:
          summary: File System Almost Full (instance {{ \$labels.instance }})
          description: |-
            File system has < 10% free space
              VALUE = {{ \$value }}
              LABELS: {{ \$labels }}

  - name: docker-container-alerts
    rules:
      # ðŸš¨ Alert: Docker Disk Usage High
      - alert: DockerDiskUsageHigh
        expr: node_filesystem_free_bytes{mountpoint="/var/lib/docker"} / node_filesystem_size_bytes{mountpoint="/var/lib/docker"} * 100 < 10
        for: 5m
        labels:
          severity: critical
        annotations:
          summary: "Docker Disk Usage High"
          description: "Docker disk usage is above 90%, remaining space is less than 10%."

      # ðŸš¨ Alert: High Memory Usage in a Container
      - alert: DockerContainerHighMemory
        expr: container_memory_usage_bytes{container_label_com_docker_compose_service!=""} / container_spec_memory_limit_bytes * 100 > 80
        for: 2m
        labels:
          severity: warning
        annotations:
          summary: "High Memory Usage in Docker Container"
          description: "Container {{ $labels.container_label_com_docker_compose_service }} is using more than 80% of its allocated memory."

      # ðŸš¨ Alert: High CPU Usage in a Container
      - alert: DockerContainerHighCPU
        expr: rate(container_cpu_usage_seconds_total{container_label_com_docker_compose_service!=""}[5m]) * 100 > 80
        for: 2m
        labels:
          severity: warning
        annotations:
          summary: "High CPU Usage in Docker Container"
          description: "Container {{ $labels.container_label_com_docker_compose_service }} is using more than 80% CPU."

      # ðŸš¨ Alert: Frequent Container Restarts
      - alert: DockerContainerRestarting
        expr: increase(container_restart_count{container_label_com_docker_compose_service!=""}[10m]) > 3
        for: 10m
        labels:
          severity: critical
        annotations:
          summary: "Docker Container Restarting Frequently"
          description: "Container {{ $labels.container_label_com_docker_compose_service }} has restarted more than 3 times in 10 minutes."

      # ðŸš¨ Alert: Stopped Docker Containers
      - alert: DockerContainerStopped
        expr: sum by (state) (engine_daemon_container_states_containers{state="stopped"}) > 0
        for: 2m
        labels:
          severity: critical
        annotations:
          summary: "Stopped Container Alert"
          description: "One or more Docker containers are in a stopped state for more than 2 minutes."

      # ðŸš¨ Alert: Paused Docker Containers
      - alert: DockerContainerPaused
        expr: sum by (state) (engine_daemon_container_states_containers{state="paused"}) > 0
        for: 2m
        labels:
          severity: warning
        annotations:
          summary: "Paused Container Alert"
          description: "One or more Docker containers are in a paused state."

      # ðŸš¨ Alert: No Running Containers
      - alert: NoRunningContainers
        expr: sum by (state) (engine_daemon_container_states_containers{state="running"}) == 0
        for: 1m
        labels:
          severity: critical
        annotations:
          summary: "No Running Containers"
          description: "There are no running containers on the host."

  - name: website_alerts
    rules:
      - alert: StaticWebsiteDown
        expr: probe_success{instance="https://frissly.com"} == 0
        for: 1m
        labels:
          severity: critical
        annotations:
          summary: Static Website is Down
          description: The Static website at https://frissly.com is unreachable.

      - alert: AdminWebsiteDown
        expr: probe_success{instance="https://admin.frissly.com"} == 0
        for: 1m
        labels:
          severity: critical
        annotations:
          summary: Admin Website is Down
          description: The Admin website at https://admin.frissly.com is unreachable.

  - name: ssl_alerts
    rules:
      - alert: SSLCertificateExpiring
        expr: ssl_cert_expires_in < 30 * 24 * 60 * 60
        for: 1d
        labels:
          severity: warning
        annotations:
          summary: SSL certificate expiring soon ({{ \$labels.instance }})
          description: "The SSL certificate expires in less than 30 days."

      - alert: SSLCertificateExpired
        expr: ssl_cert_expires_in <= 0
        for: 1d
        labels:
          severity: critical
        annotations:
          summary: SSL certificate expired ({{ \$labels.instance }})
          description: "The SSL certificate has expired."

  - name: latency_alerts
    rules:
      - alert: HighApplicationLatency
        expr: histogram_quantile(0.99, sum by (instance, job) (rate(application_latency_seconds_bucket[5m]))) > 0.5
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: High application latency ({{ \$labels.instance }})
          description: "The 99th percentile latency is above 500ms."

      - alert: CriticalApplicationLatency
        expr: histogram_quantile(0.99, sum by (instance, job) (rate(application_latency_seconds_bucket[5m]))) > 1
        for: 5m
        labels:
          severity: critical
        annotations:
          summary: Critical application latency ({{ \$labels.instance }})
          description: "The 99th percentile latency is above 1000ms."
EOF

# Set ownership and permissions
echo "Setting ownership and permissions..."
sudo chown prometheus:prometheus /var/lib/prometheus
sudo chown -R prometheus:prometheus /opt/prometheus
sudo chmod -R 755 /opt/prometheus

# Configure Prometheus
echo "Configuring Prometheus..."
cat <<EOF | sudo tee /opt/prometheus/prometheus-3.2.1.linux-amd64/prometheus.yml
global:
  scrape_interval: 15s
  evaluation_interval: 15s

alerting:
  alertmanagers:
    - static_configs:
        - targets:
            - "localhost:9093"

rule_files:
  - "alert_rules.yml"

scrape_configs:
  - job_name: "prometheus"
    static_configs:
      - targets:
          - "localhost:9090"

  - job_name: "node_exporter"
    static_configs:
      - targets:
          - "localhost:9100"
          - "13.203.149.189:9100"

  - job_name: "docker"
    static_configs:
      - targets:
          - "13.203.149.189:9323"

  - job_name: "blackbox"
    metrics_path: /probe
    params:
      module: [http_2xx]
    static_configs:
      - targets:
          - "https://frissly.com"
          - "https://admin.frissly.com"
    relabel_configs:
      - source_labels: [address]
        target_label: __param_target
      - source_labels: [__param_target]
        target_label: instance
      - target_label: address
        replacement: "localhost:9115"
EOF

# Create Prometheus service
echo "Creating Prometheus service..."
cat <<EOF | sudo tee /etc/systemd/system/prometheus.service
[Unit]
Description=Prometheus
After=network.target

[Service]
User=prometheus
Group=prometheus
Type=simple
ExecStart=/opt/prometheus/prometheus-3.2.1.linux-amd64/prometheus --config.file=/opt/prometheus/prometheus-3.2.1.linux-amd64/prometheus.yml --storage.tsdb.path=/var/lib/prometheus

[Install]
WantedBy=multi-user.target
EOF

# Reload systemd and start Prometheus
echo "Reloading systemd and starting Prometheus..."
sudo systemctl daemon-reload
sudo systemctl enable prometheus
sudo systemctl start prometheus

# Verify Prometheus is running
echo "Verifying Prometheus is running..."
ps aux | grep prometheus
sudo netstat -tulnp | grep 9090

echo "Prometheus installation and configuration complete!"


-> After execute the above script , if blackbox exporter not appear in promethous you will copy below data and pate this path 
-> sudo vi /opt/prometheus/prometheus-3.2.1.linux-amd64/prometheus.yml

global:
  scrape_interval: 15s
  evaluation_interval: 15s

alerting:
  alertmanagers:
    - static_configs:
        - targets:
            - "localhost:9093"

rule_files:
  - "alert_rules.yml"

scrape_configs:
  - job_name: "prometheus"
    static_configs:
      - targets:
          - "localhost:9090"

  - job_name: "monitor_node_exporter"
    static_configs:
      - targets:
          - "localhost:9100"

  - job_name: "uat_node_exporter"
    static_configs:
      - targets:
          - "65.2.174.154:9100"

  - job_name: "stg_node_exporter"
    static_configs:
      - targets:
          - "13.202.180.244:9100"

  - job_name: "prod_node_exporter"
    static_configs:
      - targets:
          - "13.127.210.203:9100"


  - job_name: "uat_docker"
    static_configs:
      - targets:
          - "65.2.174.154:9323"

  - job_name: "stg_docker"
    static_configs:
      - targets:
          - "13.202.180.244:9323"

  - job_name: "prod_docker"
    static_configs:
      - targets:
          - "13.127.210.203:9323"

  - job_name: "blackbox"
    metrics_path: /probe
    params:
      module: [http_2xx]
    static_configs:
      - targets:
          - "https://frissly.com"
          - "https://m.frissly.com"
          - "https://admin.frissly.com"
    relabel_configs:
      - source_labels: [__address__]
        target_label: __param_target
      - source_labels: [__param_target]
        target_label: instance
      - target_label: __address__
        replacement: "localhost:9115"


-> sudo systemctl daemon-reload
-> sudo systemctl restart prometheus
-> ps aux | grep prometheus
-> sudo netstat -tulnp | grep 9090
