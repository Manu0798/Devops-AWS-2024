# Install Loki
-> wget https://github.com/grafana/loki/releases/download/v3.4.2/loki-linux-amd64.zip -O ~/loki-server.zip
-> unzip ~/loki-server.zip -d ~/loki-server
-> sudo mv ~/loki-server/loki-linux-amd64 /usr/local/bin/loki
-> sudo chmod +x /usr/local/bin/loki

-> loki --version

-> sudo vi /etc/loki-config.yml

auth_enabled: false

server:
  http_listen_port: 3100

common:
  path_prefix: /var/loki

ingester:
  lifecycler:
    address: 127.0.0.1
    ring:
      kvstore:
        store: inmemory
      replication_factor: 1
  chunk_idle_period: 5m
  chunk_retain_period: 30s

schema_config:
  configs:
    - from: 2022-06-01
      store: boltdb-shipper
      object_store: filesystem
      schema: v11
      index:
        prefix: index_
        period: 24h

storage_config:
  boltdb_shipper:
    active_index_directory: /var/loki/index
    cache_location: /var/loki/cache
  filesystem:
    directory: /var/loki/chunks  # ✅ Fixed misplaced directory

limits_config:
  reject_old_samples: true
  reject_old_samples_max_age: 168h
  allow_structured_metadata: false  # ✅ Fixes schema issue

compactor:
  working_directory: /var/loki/compactor  # ✅ Removed invalid `shared_store`

table_manager:
  retention_deletes_enabled: true
  retention_period: 168h

-> sudo vi /etc/systemd/system/loki.service

[Unit]
Description=Loki Log Aggregation System
After=network.target

[Service]
ExecStart=/usr/local/bin/loki -config.file=/etc/loki-config.yml
Restart=always
User=root

[Install]
WantedBy=multi-user.target

-> sudo systemctl daemon-reload
-> sudo systemctl enable loki
-> sudo systemctl start loki
-> sudo systemctl status loki
-> ps aux | grep loki
-> sudo netstat -tulnp | grep 3100

# To get logs from cloud watch
-> vi cloudwatch_log_fetcher.sh

#!/bin/bash

# Variables
LOG_GROUPS=(
  "/aws/apprunner/staging-Backend-01/e2dc1c0c5818484387f9cf9ea59c9c97/service"
  "/aws/apprunner/staging-Backend-01/e2dc1c0c5818484387f9cf9ea59c9c97/application"
)
LOG_FILE="/var/cloudwatch.log"

# Ensure the log file exists and has correct permissions
if [[ ! -f "$LOG_FILE" ]]; then
  sudo touch "$LOG_FILE"
  sudo chmod 666 "$LOG_FILE"  # Allows read/write access for all users
fi

for LOG_GROUP in "${LOG_GROUPS[@]}"; do
  # Get the latest log stream name dynamically
  LOG_STREAM_NAME=$(aws logs describe-log-streams --log-group-name "$LOG_GROUP" \
    --order-by "LastEventTime" --descending --query 'logStreams[0].logStreamName' --output text 2>/dev/null)

  if [[ -z "$LOG_STREAM_NAME" || "$LOG_STREAM_NAME" == "None" ]]; then
    echo "$(date) - No log stream found in $LOG_GROUP" | sudo tee -a "$LOG_FILE"
    continue
  fi

  # Fetch logs from the latest stream
  LOGS=$(aws logs get-log-events --log-group-name "$LOG_GROUP" --log-stream-name "$LOG_STREAM_NAME" \
    --limit 100 --query 'events[*].message' --output text 2>/dev/null)

  if [[ -z "$LOGS" ]]; then
    echo "$(date) - No new logs found in stream $LOG_STREAM_NAME of $LOG_GROUP" | sudo tee -a "$LOG_FILE"
  else
    echo "[$LOG_GROUP] $LOGS" | sudo tee -a "$LOG_FILE"
    echo "$(date) - Logs updated from $LOG_STREAM_NAME of $LOG_GROUP" | sudo tee -a "$LOG_FILE"
  fi
done


-> chmod +x cloudwatch_log_fetcher.sh
-> sudo -E ./cloudwatch_log_fetcher.sh
-> echo "* * * * * /home/ubuntu/cloudwatch_log_fetcher.sh" | crontab
-> crontab -l



# Install Promtail
-> wget https://github.com/grafana/loki/releases/latest/download/promtail-linux-amd64.zip -O ~/promtail.zip
-> sudo apt update && sudo apt install unzip -y
-> unzip ~/promtail.zip -d ~/promtail
-> sudo mv ~/promtail/promtail-linux-amd64 /usr/local/bin/promtail
-> sudo chmod +x /usr/local/bin/promtail
-> promtail --version
-> sudo vi /etc/promtail-config.yml   (You will get below file from this link wget https://raw.githubusercontent.com/grafana/loki/main/clients/cmd/promtail/promtail-local-config.yaml)

server:
  http_listen_port: 9080
  grpc_listen_port: 0

positions:
  filename: /tmp/positions.yaml

clients:
  - url: http://localhost:3100/loki/api/v1/push

scrape_configs:
  - job_name: system
    static_configs:
      - targets:
          - localhost
        labels:
          job: varlogs
          __path__: /var/log/*log
          stream: stdout

  - job_name: cloudwatch_logs
    static_configs:
      - targets:
          - localhost
        labels:
          job: cloudwatch_logs
          __path__: /var/log/cloudwatch.log



-> sudo vi /etc/systemd/system/promtail.service

[Unit]
Description=Promtail
After=network.target

[Service]
Type=simple
ExecStart=/usr/local/bin/promtail -config.file=/etc/promtail-config.yml
Restart=always
User=root

[Install]
WantedBy=multi-user.target


-> sudo systemctl daemon-reload
-> sudo systemctl enable promtail
-> sudo systemctl start promtail
-> sudo systemctl status promtail
-> ps aux | grep promtail
-> sudo netstat -tulnp | grep 9080


# Send docker container logs to loki
-> First you have install one plugin
-> docker plugin install grafana/loki-docker-driver --alias loki --grant-all-permissions
-> docker plugin ls
-> sudo vi /etc/docker/daemon.json

{
  "metrics-addr": "0.0.0.0:9323",
  "experimental": true,
  "log-driver": "loki",
  "log-opts": {
    "loki-url": "http://13.235.0.156:3100/loki/api/v1/push",
    "loki-retries": "5",
    "loki-batch-size": "400",
    "debug": "true"
  }
}

-> sudo systemctl restart docker     {when you restart the container whichever containers are running those container goes in stop status, you need to start it againg}



