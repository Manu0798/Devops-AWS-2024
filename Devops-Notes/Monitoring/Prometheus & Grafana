# What is Prometheus [ It is a monitoring tool]
-> Prometheus is an open-source system monitoring and alerting toolkit.
-> Prometheus collect and store its metrics as time series data
-> Prometheus out-of-the box monitoring capabilities for the K8S container orchestration platform
 
Note:Prometheus will collect the data and Prometheus will give the data to grafana and grafana analysis the data and
   generate the charts and graphs for users

# What is Grafana [It is a visulation tool]
-> Grafana is database analysis and monitoring tool
-> Grafana is multiplatform open source analytics and interactive visualiization web application
-> Grafana will connect with prometheus with data source 

# In prometheus we have two exporters 
-> Node Exporter  --> It is used for collect the metrics from server
-> Blackbox Exporter  --> It is used for collect the metrics from application


# How to install Prometheus 
-> Go to this https://prometheus.io/download/
-> After we have to install node exporter for monitoring the server
-> you will find node export link if you scroll down
# install blackbox for monitoring the server
-> wget https://github.com/prometheus/node_exporter/releases/download/v1.9.0/node_exporter-1.9.0.linux-amd64.tar.gz
-> tar -xvf node_exporter-1.9.0.linux-amd64.tar.gz
-> rm node_exporter-1.9.0.linux-amd64.tar.gz
-> cd node_exporter-1.9.0.linux-amd64/
-> ./node_exporter
-> After start the node exporter, you will copy in web browser along with ip and port number, default port is 9100
-> If you want to run in backgroung  
-> nohup ./node_exporter &
-> ps aux | grep node_exporter

# install blackbox for monitoring the application
-> wget https://github.com/prometheus/blackbox_exporter/releases/download/v0.26.0/blackbox_exporter-0.26.0.linux-amd64.tar.gz
-> tar -xvf blackbox_exporter-0.26.0.linux-amd64.tar.gz
-> rm blackbox_exporter-0.26.0.linux-amd64.tar.gz
-> cd blackbox_exporter-0.26.0.linux-amd64/
-> nohup ./blackbox_exporter &
-> ps aux | grep blackbox_exporter
-> After start the blackbox_exporter, you will copy in web browser along with ip and port number, default port is 9115

# Install loki
-> wget https://github.com/grafana/loki/releases/download/v3.4.2/loki-linux-amd64.zip -O ~/loki-server.zip
-> unzip ~/loki-server.zip -d ~/loki-server
-> sudo mv ~/loki-server/loki-linux-amd64 /usr/local/bin/loki
-> sudo chmod +x /usr/local/bin/loki

-> loki --version
-> sudo /usr/local/bin/loki --config.file=/etc/loki-config.yml

-> sudo vi /etc/loki-config.yml

auth_enabled: false

server:
  http_listen_port: 3100

common:
  path_prefix: /var/loki

ingester:
  lifecycler:
    address: 127.0.0.1
    ring:
      kvstore:
        store: inmemory
      replication_factor: 1
  chunk_idle_period: 5m
  chunk_retain_period: 30s

schema_config:
  configs:
    - from: 2022-06-01
      store: boltdb-shipper
      object_store: filesystem
      schema: v11
      index:
        prefix: index_
        period: 24h

storage_config:
  boltdb_shipper:
    active_index_directory: /var/loki/index
    cache_location: /var/loki/cache
  filesystem:
    directory: /var/loki/chunks  # ✅ Fixed misplaced directory

limits_config:
  reject_old_samples: true
  reject_old_samples_max_age: 168h
  allow_structured_metadata: false  # ✅ Fixes schema issue

compactor:
  working_directory: /var/loki/compactor  # ✅ Removed invalid `shared_store`

table_manager:
  retention_deletes_enabled: true
  retention_period: 168h

-> sudo nohup /usr/local/bin/loki --config.file=/etc/loki-config.yml > /tmp/loki.log 2>&1 &
-> ps aux | grep loki
-> sudo netstat -tulnp | grep 3100
-> sudo cat /tmp/loki.log


# Install promtail
-> wget https://github.com/grafana/loki/releases/latest/download/promtail-linux-amd64.zip -O ~/promtail.zip
-> sudo apt update && sudo apt install unzip -y
-> unzip ~/promtail.zip -d ~/promtail
-> sudo mv ~/promtail/promtail-linux-amd64 /usr/local/bin/promtail
-> sudo chmod +x /usr/local/bin/promtail
-> promtail --version
-> sudo vi /etc/promtail-config.yml

server:
  http_listen_port: 9080
  grpc_listen_port: 0

positions:
  filename: /var/log/positions.yaml  # Make sure this file is writable

clients:
  - url: http://localhost:3100/loki/api/v1/push  # Ensure Loki is accessible

scrape_configs:
  - job_name: system
    static_configs:
      - targets:
          - localhost
        labels:
          job: varlogs
          host: ${HOSTNAME}
          __path__: /var/log/*.log  # Ensure logs exist in this path


-> sudo touch /var/log/positions.yaml
-> sudo useradd -r -s /sbin/nologin promtail
-> sudo chown promtail:promtail /var/log/positions.yaml
-> sudo chmod 664 /var/log/positions.yaml
-> sudo chown promtail:promtail /var/log
-> sudo chmod 777 /var/log
-> nohup promtail -config.file=/etc/promtail-config.yml > /tmp/promtail.log 2>&1 &
-> ps aux | grep promtail
-> sudo cat /tmp/promtail.log


# install prometheus
-> you will find below prometheus link in prometheus offical website
-> wget https://github.com/prometheus/prometheus/releases/download/v3.2.1/prometheus-3.2.1.linux-amd64.tar.gz
-> tar -xvf prometheus-3.2.1.linux-amd64.tar.gz
-> rm prometheus-3.2.1.linux-amd64.tar.gz
-> cd prometheus-3.2.1.linux-amd64/
-> vi prometheus.yml
-> Delete the existing data and copy below data to modify the node_exporter and black box exporter ips and portnumber
-> If you not understand to setup this you will watch video in below link


global:
  scrape_interval: 15s
  evaluation_interval: 15s

alerting:
  alertmanagers:
    - static_configs:
        - targets: null

rule_files: null

scrape_configs:
  - job_name: prometheus
    static_configs:
      - targets:
          - localhost:9090

  - job_name: node_exporter
    static_configs:
      - targets:
          - 13.203.139.71:9100
          - 13.202.62.29:9100  # Merged under the same job name

  - job_name: blackbox
    metrics_path: /probe
    params:
      module:
        - http_2xx
    static_configs:
      - targets:
          - https://bitbucket.org/manojvarmapotthuri/frissly-backend/src/main/
          - https://main.d277es0wj6psb9.amplifyapp.com
    relabel_configs:
      - source_labels:
          - __address__
        target_label: __param_target
      - source_labels:
          - __param_target
        target_label: instance
      - target_label: __address__
        replacement: 13.202.62.29:9115


-> nohup ./prometheus &
-> ps aux | grep prometheus
-> After start the prometheus, you will copy in web browser along with ip and port number, default port is 9090
-> Click on status and select target

-> After setup prometheus you will grafana for visulation to create charts, graphs
-> Install grafana 
-> https://grafana.com/grafana/download
-> sudo apt-get install -y adduser libfontconfig1 musl
-> wget https://dl.grafana.com/enterprise/release/grafana-enterprise_11.5.2_amd64.deb
-> sudo dpkg -i grafana-enterprise_11.5.2_amd64.deb
-> sudo /bin/systemctl daemon-reload
-> sudo /bin/systemctl enable grafana-server
-> sudo /bin/systemctl start grafana-server
-> After that copy the ip paste it in web browser along with port number 3000 
-> Later click on connection, search the prometheus, click add new database, copy the prometheus URL and click save and test
-> Later you will import the dash board for that use below links for node exporter dash board
-> search node exporter grafana dashboard, click first one
-> https://grafana.com/grafana/dashboards/1860-node-exporter-full/
-> Copy the id
-> Go to the grafana, click dashboard, clikc new, choose import, paste id, click load, choose prometheus database, click import
-> Later you will add the blackbox dashboard, go to browser search blackbox exporter grafana dashboard
-> https://grafana.com/grafana/dashboards/7587-prometheus-blackbox-exporter/
-> Copy the id
-> Go to the grafana, click dashboard, clikc new, choose import, paste id, click load, choose prometheus database, click import


-> https://youtu.be/n7WWme--U2I?si=AFc2M6MrJpGk95V1   --> video link
-> https://github.com/prometheus/blackbox_exporter    --> TO get blackbox exporter data


ps aux | grep prometheus
sudo kill -9 <PID>
nohup ./prometheus &






# Install loki
-> wget https://github.com/grafana/loki/releases/download/v3.4.2/logcli-linux-amd64.zip -O ~/loki.zip
-> sudo apt update && sudo apt install unzip -y
-> unzip ~/loki.zip -d ~/loki
-> sudo mv ~/loki/logcli-linux-amd64 /usr/local/bin/loki
-> sudo chmod +x /usr/local/bin/loki
-> loki --version
-> sudo vi /etc/loki-config.yml

auth_enabled: false

server:
  http_listen_port: 3100

ingester:
  lifecycler:
    ring:
      kvstore:
        store: inmemory
      replication_factor: 1
  chunk_idle_period: 5m
  chunk_retain_period: 30s

schema_config:
  configs:
    - from: 2022-01-01
      store: boltdb-shipper
      object_store: filesystem
      schema: v11
      index:
        prefix: index_
        period: 24h

storage_config:
  boltdb_shipper:
    active_index_directory: /tmp/loki/index
    cache_location: /tmp/loki/cache
    shared_store: filesystem
  filesystem:
    directory: /tmp/loki/chunks

-> sudo nohup loki -config.file=/etc/loki-config.yml > /tmp/loki.log 2>&1 &
-> ps aux | grep loki


# Install CloudWatch Exporter
-> wget https://github.com/prometheus/cloudwatch_exporter/releases/download/v0.16.0/cloudwatch_exporter-0.16.0-jar-with-dependencies.jar -O cloudwatch_exporter.jar
-> ls -lh cloudwatch_exporter.jar
-> sudo vi /etc/cloudwatch_exporter.yml

region: ap-south-1  # Change this to your AWS region
metrics:
  - aws_namespace: AWS/EC2
    aws_metric_name: CPUUtilization
    aws_dimensions: [InstanceId]
    aws_statistics: [Average]
  - aws_namespace: AWS/AppRunner
    aws_metric_name: RequestCount
    aws_dimensions: [ServiceName]
    aws_statistics: [Sum]


-> nohup java -jar cloudwatch_exporter.jar 9106 /etc/cloudwatch_exporter.yml > cloudwatch_exporter.log 2>&1 &
-> ps aux | grep cloudwatch_exporter
-> netstat -tulnp | grep 9106


# How to install CloudWatch Agent configuration
-> sudo apt-get update -y
-> sudo apt install collectd -y
-> curl -O https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb
-> sudo dpkg -i amazon-cloudwatch-agent.deb
-> ls /opt/aws/amazon-cloudwatch-agent/bin/
-> export PATH=$PATH:/opt/aws/amazon-cloudwatch-agent/bin
-> amazon-cloudwatch-agent --version
-> sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-config-wizard
-> After complete the configuration it will defaulty save that configuration file at /opt/aws/amazon-cloudwatch-agent/bin/config.json
-> The CloudWatch agent expects the configuration at  /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
-> sudo cp /opt/aws/amazon-cloudwatch-agent/bin/config.json /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
-> cat /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
-> sudo systemctl enable amazon-cloudwatch-agent
-> sudo systemctl start amazon-cloudwatch-agent
-> sudo systemctl status amazon-cloudwatch-agent

# If you want to get logs of server you should below configuration
# Create a Log Group
-> Go to AWS Console → CloudWatch → Logs
-> Click Log groups
-> Click Create log group
-> Enter a name (e.g., /ec2/logs) and click Create
-> sudo vi /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
-> Remove existing and paste the below contenent

{
  "logs": {
    "logs_collected": {
      "files": {
        "collect_list": [
          {
            "file_path": "/var/log/syslog",
            "log_group_name": "/ec2/logs",
            "log_stream_name": "{instance_id}-syslog",
            "timestamp_format": "%b %d %H:%M:%S"
          },
          {
            "file_path": "/var/log/messages",
            "log_group_name": "/ec2/logs",
            "log_stream_name": "{instance_id}-messages",
            "timestamp_format": "%b %d %H:%M:%S"
          }
        ]
      }
    }
  }
}

-> sudo systemctl restart amazon-cloudwatch-agent
-> sudo systemctl status amazon-cloudwatch-agent

-> After complete the above configuration Verify Log Streams in CloudWatch
-> Go to CloudWatch → Logs → Log Groups
-> Open /ec2/logs
-> Check if logs are streaming







