# Deploy the application in APP runner service
-> First i setup the Ec2, VPC and ECR infrastructure in aws using terraform (https://github.com/manoj7894/Frissly-Deployment-Custom-VPC.git)
-> I have install all the tools like jenkins, Trivy, awscli and sonarqube while i setting up the infrastructure.
-> I will access the jenkins and sonar-qube over the web browser after i setup infrastructure.
-> I have to setup the jenkins configuration for execute CI/CD pipeline


-> You have to install the below plugins
    -> EclipseTemurin
    -> Docker
    -> Docker pipeline
    -> SonarQube scanner
    -> SonarQube Quality gate
    -> Quality gate
    -> Nodejs
    -> OWASP Dependency-Check
    -> Email-extension plugin
    -> AWS Steps
    -> AWS Credentials
    -> Bitbucket

-> You will restart the Jenkins after install the plugins
-> Go to manage Jenkins, click credentials and cofigure below credentials
    docker -> Click username and password, Give username and password and give id name
    Sonarube -> Click secret, Give token which you created in sonarqube and give id name
    Git -> Click username and password, give username and token which you created in github, give id name
    Email -> Click username and password, Give mail-id and email token [To get this email-token you have to go gmail, click manage google account
                  click security and search App password in search bar and click app password and give one name and create
    AWS-> Click AwS, Give access key and secret key

-> Go to manage Jenkins, click configuration tools and install below tools
   JDK-17, Click automatically install, Click Install from adoptium.net and choose latest version
   JDK-11, Click automatically install, Click Install from adoptium.net and choose latest version
   Git, Keep it default
   Sonar-scanner, Click install automatically, Choose latest version
   Nodejs, Give name, Click install automatically
   Dependency check click install automatically and click Install from github.com and choose latest version
   Maven, Give name, Click install automatically and choose latest version 
   Docker, Give name Click install automatically and choose latest version

-> After complete to configure the tools later click the system configuration
   SonarQube-Installition, Give name, Give the Sonar-qube URL and choose the soanr-token credentials id which you have created in credentials
   Extended Email Notification -> Give smtp.gmail.com, Give 465 port, Click Advanced choose mail-id which you created in credentals, Click use SSL
   Email Notification -> Give smtp.gmail.com, click advanced, Give mail and email token which you created before in gmail.

-> To set up the sonar-quality gate. Go to sonarqube, click administation, click configuration, click webhook and give jenkins URL 
       http://54.198.209.63:8080/sonarqube-webhook


pipeline {
    agent any

    tools {
        nodejs 'node22'
    }

    environment {
        DOCKER_IMAGE = "swigy"
        SCANNER_HOME = tool 'sonar-scanner'
        AWS_REGION = 'us-east-1'  // Update your AWS region
        AWS_ACCOUNT_ID = '869935101375'
        ECR_REPOSITORY = 'frissly'
    }

    stages {
        stage('Remove All Previous Docker Images') {
            steps {
                sh 'docker rmi -f $(docker images -a -q) || true'
            }
        }

        stage('Cleanup Old Trivy Reports') {
            steps {
                script {
                    echo "Cleaning up old Trivy reports..."
                    sh '''
                        rm -f trivy.txt
                        rm -f fs-report.html
                    '''
                }
            }
        }

        stage('Get Code') {
            steps {
                git branch: 'main', credentialsId: 'Github_id', url: 'https://github.com/manoj7894/swiggy-nodejs-devops-project.git'
            }
        }

        stage('Install Package Dependencies') {
            steps {
                sh "npm install"
            }
        }

        stage('Check for Tests') {
            steps {
                script {
                    def testScriptExists = sh(script: "grep -q '\"test\":' package.json", returnStatus: true) == 0
                    env.TEST_SCRIPT_EXISTS = testScriptExists ? 'true' : 'false'
                }
            }
        }

        stage('Trivy Filesystem Scan') {
            steps {
                script {
                    sh "trivy fs --format table -o fs-report.html ."
                }
            }
        }

        stage('OWASP Scan') {
            when {
                expression {
                    fileExists('package.json')
                }
            }
            steps {
                dependencyCheck additionalArguments: '', odcInstallation: 'DP-Check'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }

        stage('SonarQube') {
            steps {
                withSonarQubeEnv('Sonar_Install') {
                    sh '''$SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=Validate \
                    -Dsonar.projectKey=Validate \
                    -Dsonar.host.url=http://54.173.242.65:9000'''
                }
            }
        }

        stage('Stage V: QualityGates') {
            steps {
                echo "Running Quality Gates to verify the code quality"
                script {
                    timeout(time: 2, unit: 'MINUTES') {
                        def qg = waitForQualityGate()
                        if (qg.status != 'OK') {
                            error "Pipeline aborted due to quality gate failure: ${qg.status}"
                        }
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'Docker_id', toolName: 'Docker') {
                        // Ensure image is tagged with the ECR URL and build number
                        sh "docker build -t ${DOCKER_IMAGE} ."
                    }
                }
            }
        }
        
        stage('Trivy Image Scan') {
            steps {
                script {
                    sh "trivy image ${DOCKER_IMAGE} > trivy.txt"
                }
            }
        }

        stage('Create ECR Repository if Not Exists') {
            steps {
                script {
                    sh '''
                        # Check if the repository exists, if not, create it
                        aws ecr describe-repositories --repository-names ${ECR_REPOSITORY} --region ${AWS_REGION} || \
                        aws ecr create-repository --repository-name ${ECR_REPOSITORY} --region ${AWS_REGION}
                    '''
                }
            }
        }

        stage('Push Into ECR') {
            steps {
                script {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'AWS_Credetilas_id']]) {
                        sh '''
                            # Login to AWS ECR
                            aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
                            
                            # Check if the image exists locally
                            docker images | grep ${DOCKER_IMAGE}
                            
                            # Tag the Docker image with the correct ECR repository
                            docker tag ${DOCKER_IMAGE} ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}:latest
                            
                            # Push the Docker image to ECR
                            docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}:latest
                        '''
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                def jobName = 'Frissly'
                def buildNumber = env.BUILD_NUMBER
                def pipelineStatus = currentBuild.result ?: 'UNKNOWN'
                def bannerColor = pipelineStatus.toUpperCase() == 'SUCCESS' ? 'green' : 'red'

                def body = """<html>
                                <body>
                                    <div style="border: 4px solid ${bannerColor}; padding: 10px;">
                                        <h2>${jobName} - Build ${buildNumber}</h2>
                                        <div style="background-color: ${bannerColor}; padding: 10px;">
                                            <h3 style="color: white;">Pipeline Status: ${pipelineStatus.toUpperCase()}</h3>
                                        </div>
                                        <p>Check the <a href="${BUILD_URL}">console output</a>.</p> 
                                    </div>
                                </body>
                            </html>"""

                emailext(
                    subject: "${jobName} - Build ${buildNumber} - ${pipelineStatus.toUpperCase()}",
                    body: body,
                    to: 'manojvarmapotthutri@gmail.com',
                    from: 'jenkins@example.com',
                    replyTo: 'jenkins@example.com',
                    attachmentsPattern: '**/fs-report.html,**/trivy.txt',
                    mimeType: 'text/html'
                )
            }
        }
    }
}




# This is for github actions
-> You have to create self-hosted runner for that go to setting in github, click on actions, select the runner, click new-selfhosted runner
-> Then it will some command you will execute that commands sequently in your server
-> You have to pass the some secrets in setting, click on secrets and variables, click on actions, click the new repo secret in secret
-> you have keep below script in this .github/workflows/backend.yml

name: Node.js Docker Image Deploy into ECR

on:
  push:
    branches:
      - "cms-dev"
  pull_request:
    branches:
      - "cms-dev"

jobs:
  build:
    runs-on: self-hosted
    
    env:
      AWS_REGION: ap-south-1
      ECR_REPO_NAME: frissly-docker-repo  # Replace this with your repository name
      DOCKER_IMAGE_NAME: frissly-backend
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'  # Set your Node.js version here

      - name: Check if npm is available
        id: check_npm
        run: |
          if ! command -v npm &> /dev/null
          then
            echo "npm not found, skipping npm install, build, and test."
            echo "npm_found=false" >> $GITHUB_ENV
          else
            echo "npm found, proceeding with npm install, build, and test."
            echo "npm_found=true" >> $GITHUB_ENV
          fi

      - name: Install dependencies, build, and test
        if: env.npm_found == 'true'
        run: |
          npm install
          npm run build --if-present
          npm run test --if-present

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # - name: Install Trivy
      #   run: |
      #     curl -sfL https://github.com/aquasecurity/trivy/releases/download/v0.39.0/trivy_0.39.0_Linux-64bit.deb -o trivy.deb
      #     sudo dpkg -i trivy.deb

      - name: Trivy filesystem scan
        run: |
          trivy fs --format table -o fs-report.html .

      # - name: Install OWASP Dependency-Check
      #   run: |
      #     wget https://github.com/jeremylong/DependencyCheck/releases/download/v11.1.1/dependency-check-11.1.1-release.zip
      #     unzip dependency-check-11.1.1-release.zip
      #     cd dependency-check
      #     ./bin/dependency-check.sh --version

      # - name: Run OWASP Dependency-Check
      #   run: |
      #     cd dependency-check
      #     ./bin/dependency-check.sh --project "NodeJS App" --scan . --out ./dependency-check-report --format XML

      # SonarQube Scan
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      # # SonarQube Quality Gate check
      # - name: SonarQube Quality Gate check
      #   id: quality-gate
      #   uses: sonarsource/sonarqube-quality-gate-action@master
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #     SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      # - name: Debug Quality Gate Status
      #   run: |
      #     echo "Quality Gate Status: ${{ steps.quality-gate.outputs.quality_gate_status }}"

      # - name: Generate build image tag
      #   id: build_tag
      #   run: |
      #     # Generate a version-based tag with a prefix and timestamp
      #     BUILD_TAG="v$(date +%Y%m%d%H%M%S)-${{ github.run_number }}"
      #     echo "build_tag=$BUILD_TAG" >> $GITHUB_ENV
      #     echo "Docker image will be tagged as: $BUILD_TAG"

      - name: Build Docker image
        run: |
          docker build -t $DOCKER_IMAGE_NAME .

      - name: Trivy image scan
        run: |
          trivy image --format table -o image.html $DOCKER_IMAGE_NAME

      - name: Create ECR repository (if not exists)
        run: |
          aws ecr describe-repositories --repository-names $ECR_REPO_NAME || aws ecr create-repository --repository-name $ECR_REPO_NAME

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
          
      - name: Tag Docker image for ECR
        run: |
          docker tag $DOCKER_IMAGE_NAME:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/$ECR_REPO_NAME:latest

      - name: Push Docker image to ECR
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/$ECR_REPO_NAME:latest
      - name: Clean up previous Docker images and volumes
        run: |
          echo "Cleaning up Docker images and volumes..."
          docker system prune -af || true  # Removes unused images, containers, networks, and build cache
          docker volume prune -f || true
          

      - name: Verify attachment files
        run: |
          ls -al fs-report.html || echo "fs-report.html not found!"
          ls -al image.html || echo "image.html not found!"
          ls -al ./dependency-check/dependency-check-report/dependency-check-report.xml || echo "dependency-check-report.xml not found!"


      - name: Upload OWASP Dependency-Check report
        uses: actions/upload-artifact@v3
        with:
          name: dependency-check-report
          path: ./dependency-check/dependency-check-report/dependency-check-report.xml

      - name: Upload Trivy filesystem scan report
        uses: actions/upload-artifact@v3
        with:
          name: trivy-filesystem-scan-report
          path: fs-report.html

      - name: Upload Trivy image scan report
        uses: actions/upload-artifact@v3
        with:
          name: trivy-image-scan-report
          path: image.html
          

      - name: Send email notification
        if: always()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.SMTP_USER }}
          password: ${{ secrets.SMTP_PASS }}
          subject: "GitHub Actions Build Status - ${{ github.workflow }} ${{ job.status }}"
          body: |
            The build for ${{ github.repository }} has completed.

            Status: ${{ job.status }}
            Commit: ${{ github.sha }}
            Branch: ${{ github.ref }}
          to: "varmapotthuri4@gmail.com"
          from: "sender@example.com"
          attachments: |
            fs-report.html
            image.html
            ./dependency-check/dependency-check-report/dependency-check-report.xml

        # Clean up entire workspace after the job completes
      - name: Clean up workspace
        run: |
          echo "Cleaning up entire workspace to save disk space..."
          rm -rf *

-> After executing the above pipeline script.
-> You will create apprunner with terraform (https://github.com/manoj7894/Frissly-Deployment-Custom-VPC.git)
