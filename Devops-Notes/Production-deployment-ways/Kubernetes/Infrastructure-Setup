-> First We have to setup the Ec2, EKS, VPC infrastructure using terraform. The Script would be available this Github URL ()
-> We have to create Service Account and Roles in our EKS Cluster. Those manifest files should be available in this Github URL (https://github.com/manoj7894/Devops-AWS-2024/tree/master/Devops-Notes/Production-deployment-ways/Kubernetes/Service-Account-Files)
    (account.yml, role.yml, role-binding.yml, persistence-role.yml, persistence-role-binding.yml, manoj-cluster-admin.yaml, secret.yml)

# If you want to use docker private repo to store docker images in docker hub you should execute below command in server
-> kubectl create secret docker-registry regcred --docker-server=https://index.docker.io/v1/ --docker-username=manoj3003 --docker-password=Varma_3003 --namespace=frissly

# How âœ… Install AWS Load Balancer Controller

            # Prerequisites:
            eksctl utils associate-iam-oidc-provider \
              --region us-east-1 \
              --cluster secure-eks \
              --approve
            
            # Create IAM policy
            curl -o iam_policy.json \
              https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/main/docs/install/iam_policy.json
            
            aws iam create-policy \
              --policy-name AWSLoadBalancerControllerIAMPolicy \
              --policy-document file://iam_policy.json
            
            # Create service account for controller
            eksctl create iamserviceaccount \
              --cluster secure-eks \
              --namespace kube-system \
              --name aws-load-balancer-controller \
              --attach-policy-arn arn:aws:iam::<your_account_id>:policy/AWSLoadBalancerControllerIAMPolicy \
              --approve
            
            # Install CRDs + Controller via Helm
            helm repo add eks https://aws.github.io/eks-charts
            helm repo update
            
            helm install aws-load-balancer-controller eks/aws-load-balancer-controller \
              -n kube-system \
              --set clusterName=secure-eks \
              --set serviceAccount.create=false \
              --set region=us-east-1 \
              --set vpcId=<your_vpc_id> \
              --set serviceAccount.name=aws-load-balancer-controller



-> helm list -n kube-system
-> kubectl get pods -n kube-system | grep aws-load-balancer-controller
-> kubectl get pods -n kube-system | grep aws-load      --> Verify AWS Load Balancer Controller is installed

-> kubectl logs -n kube-system deployment/aws-load-balancer-controller
-> kubectl describe pod <pod-name> -n kube-system
-> kubectl logs <pod-name> -n kube-system

#âœ… Tag the public subnet (for the ALB):
Use this if you want the ALB to be publicly accessible (internet-facing):
-> aws ec2 create-tags --resources subnet-036e280494be0ae15 subnet-07f35c51190df9a92   --tags Key=kubernetes.io/role/elb,Value=1          Key=kubernetes.io/cluster/frissly-stag-eks-cluster,Value=owned
# Tag the private subnets (for worker nodes + internal traffic):
-> aws ec2 create-tags --resources subnet-08945387cfad57851 subnet-07ec8a824ee6b07a2   --tags Key=kubernetes.io/role/internal-elb,Value=1          Key=kubernetes.io/cluster/frissly-stag-eks-cluster,Value=owned   
-> aws ec2 describe-subnets   --filters "Name=tag:kubernetes.io/cluster/<your-cluster-name>,Values=owned"   --query "Subnets[*].Tags"
-> aws ec2 describe-subnets --filters "Name=tag:kubernetes.io/cluster/<your-cluster-name>,Values=owned"


apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: swigy-frontend-ingress
  namespace: frissly
  annotations:
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/backend-protocol: HTTP
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}]'
spec:
  ingressClassName: alb
  rules:
    - http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: swigy-frontend-service
                port:
                  number: 80




# For dynamic persistance volume
âœ… Recommended Approach: Use a StorageClass with volumeBindingMode: WaitForFirstConsumer

-> eksctl utils associate-iam-oidc-provider --region ap-south-1 --cluster <give clustername> --approve
-> eksctl create iamserviceaccount   --region us-east-2   --name ebs-csi-controller-sa   --namespace kube-system   --cluster eks-1   --attach-policy-arn arn:aws:iam::aws:policy/service-role/AmazonEBSCSIDriverPolicy   --approve   --override-existing-serviceaccounts
-> After execute above it will in cloud formation
-> kubectl apply -k "github.com/kubernetes-sigs/aws-ebs-csi-driver/deploy/kubernetes/overlays/stable/ecr/?ref=release-1.11"


apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: ebs-sc
provisioner: kubernetes.io/aws-ebs
volumeBindingMode: WaitForFirstConsumer
parameters:
  type: gp3
  fsType: ext4



apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: backend-pvc
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: ebs-sc
  resources:
    requests:
      storage: 10Gi


# Note for manual EBS
# If you want to attach manual EBS volumes you should follow below steps(But Production it is not recommend) because
-> your worker nodes are in multiple Availability Zones (AZs) â€” ap-south-1b and ap-south-1c â€” you need to design EBS volumes carefully, because:
ðŸ”’ Amazon EBS volumes are AZ-specific â€” you cannot attach an EBS volume created in ap-south-1b to a node in ap-south-1c.
# For Attach EBS to persistence Volumes
-> Go to volumes in AWS, create EBS volume with same AZ wherever workernodes at located
-> After create the volume, you will keep that volumeID in your persistence volumes
-> We have to Install below commands for EBS volume to attache the persistence volume



->  After complete the infrastructure setup you will access Jenkins and sonarqube with the help of service public IP and those port numbers 
-> Loginto the Jenkins and Go to manage Jenkins and click plugins Install below plugins
    -> Eclipse Temurin installer
    -> Docker
    -> Docker pipeline
    -> SonarQube scanner
    -> Sonar Quality Gates
    -> Quality gates
    -> Nodejs
    -> OWASP Dependency-Check
    -> Email Extension Template
    -> Kubernetes
    -> Kuberntes Client API
    -> Kubernetes Credentials
    -> Kubernetes CLI
    -> Kubernetes Credentials Provider
    -> Kubernetes :: Pipeline :: DevOps Steps
    -> Bitbucket
    -> Pipeline: Stage View

-> Once restart the Jenkins after install the above all plugins


-> Go to manage Jenkins, click credentials and cofigure below credentials
    docker -> Click username and password, Give username and password and give id name  (Docker_id)
    Sonarube -> Click secret text in kind, Give token which you created in sonarqube and give id name
    Git -> Click username and password, give username and token which you created in github, give id name   (Bitbucket_user)
    Email -> Click username and password, Give mail-id and email token [To get this email-token you have to go gmail, click manage google account
                  click security and search App password in search bar and click app password and give one name and create
    kuubernets-> Click secret text in kind and paste token which you copied eariler and id name and create     [You will get this token from Serviceaccount secret] (k8s_token)


-> Go to manage Jenkins, click configuration tools and install below tools
   JDK-17, Click automatically install, Click Install from adoptium.net and choose latest version
   JDK-11, Click automatically install, Click Install from adoptium.net and choose latest version
   Git, Keep it default
   Sonar-scanner, Click install automatically, Choose latest version   (sonar-scanner)
   Nodejs, Give name, Click install automatically    (node22)
   Dependency check click install automatically and click Install from github.com and choose latest version    (DP-Check)
   Maven, Give name, Click install automatically and choose latest version 
   Docker, Give name Click install automatically and choose latest version    (Docker)



-> Go to manage Jenkins, click the system configuration
   SonarQube-Installition, Give name, Give the Sonar-qube URL and choose the soanr-token credentials id which you have created in credentials    (Sonar_Install)
   Extended Email Notification -> Give smtp.gmail.com, Give 465 port, Click Advanced choose mail-id which you created in credentals, Click use SSL
   Email Notification -> Give smtp.gmail.com, click advanced, click Use SMTP Authentication Give mail and email token which you created before in gmail, Click use SSL, Give 465 port


-> To set up the sonar-quality gate. Go to sonarqube, click administation, click configuration, click webhook and give jenkins URL as like below
       http://54.198.209.63:8080/sonarqube-webhook



pipeline {
    agent any

    tools {
        nodejs 'node22'
    }

    environment {
        DOCKER_IMAGE = "manoj3003/frissly-k8s-images:${BUILD_NUMBER}"
        BIT_REPO_NAME = "frissly-backend"
        BIT_USERNAME = "manoj7894"
        BRANCH = "kubernetes"
        DEPLOYMENT_FILE_PATH = "Kubernetes/deployment.yml"
        SCANNER_HOME = tool 'sonar-scanner'
    }

    stages {

        stage('Cleanup Workspace') {
            steps {
                script {
                    echo "Cleaning up the workspace..."
                    cleanWs() // This cleans up the entire workspace directory.
                }
            }
        }

        stage('Remove All Previous Docker Images and Containers') {
            steps {

                // Remove all Docker images
                sh 'docker rmi -f $(docker images -a -q) || true'
                
                // Clean up Docker volumes
                sh 'docker volume prune -f || true'

                // Clean up Docker build cache
                sh 'docker builder prune -f || true'
                
                // Clean up unused networks
                sh 'docker network prune -f || true'
            }
        }

        stage('Cleanup Old Trivy Reports') {
            steps {
                script {
                    echo "Cleaning up old Trivy reports..."
                    sh '''
                        rm -f trivy.txt
                        rm -f fs-report.html
                    '''
                }
            }
        }

        stage('Get Code') {
            steps {
                git branch: "${BRANCH}", credentialsId: 'Bitbucket_user', url: 'https://manoj7894@bitbucket.org/manojvarmapotthuri/frissly-backend.git'
            }
        }

        stage('Install Package Dependencies') {
            steps {
                sh "npm install"
            }
        }

        stage('Check for Tests') {
            steps {
                script {
                    def testScriptExists = sh(script: "grep -q '\"test\":' package.json", returnStatus: true) == 0
                    env.TEST_SCRIPT_EXISTS = testScriptExists ? 'true' : 'false'
                }
            }
        }

        stage('Trivy Filesystem Scan') {
            steps {
                script {
                    sh "trivy fs --format table -o fs-report.html ."
                }
            }
        }

        // stage('OWASP Scan') {
        //     when {
        //         expression {
        //             fileExists('package.json')
        //         }
        //     }
        //     steps {
        //         dependencyCheck additionalArguments: '', odcInstallation: 'DP-Check'
        //         dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
        //     }
        // }

        stage('SonarQube') {
            steps {
                withSonarQubeEnv('Sonar_Install') {
                    sh '''
                        $SCANNER_HOME/bin/sonar-scanner \
                        -Dsonar.projectName=Validate \
                        -Dsonar.projectKey=Validate \
                        -Dsonar.host.url=http://3.147.61.213:9000
                    '''
                }
            }
        }

        stage('Stage V: QualityGates') {
            steps {
                echo "Running Quality Gates to verify the code quality"
                script {
                    timeout(time: 2, unit: 'MINUTES') {
                        def qg = waitForQualityGate()
                        if (qg.status != 'OK') {
                            error "Pipeline aborted due to quality gate failure: ${qg.status}"
                        }
                    }
                }
            }
        }

        stage('Build') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'Docker_id', toolName: 'Docker') {
                        sh "docker build -t ${DOCKER_IMAGE} ."
                    }
                }
            }
        }

        stage('Trivy Image Scan') {
            steps {
                script {
                    sh "trivy image ${DOCKER_IMAGE} > trivy.txt"
                }
            }
        }

        stage('Push') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'Docker_id', toolName: 'Docker') {
                        sh "docker push ${DOCKER_IMAGE}"
                    }
                }
            }
        }

        stage('Update Deployment File') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'Bitbucket_user', usernameVariable: 'BIT_USERNAME', passwordVariable: 'BIT_PASSWORD')]) {
                    script {
                        sh '''
                            git config user.email "jenkins@example.com"
                            git config user.name "Jenkins"
                        '''

                        sh 'git checkout "${BRANCH}"'
                        sh 'cat ${DEPLOYMENT_FILE_PATH}'

                        sh '''
                            sed -i "s|image: manoj3003/frissly-k8s-images:[^[:space:]]*|image: ${DOCKER_IMAGE}|g" ${DEPLOYMENT_FILE_PATH}
                        '''

                        sh '''
                            if git diff --quiet; then
                                echo "No changes detected in ${DEPLOYMENT_FILE_PATH}"
                            else
                                git add ${DEPLOYMENT_FILE_PATH}
                                git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                                git push -f https://$BIT_USERNAME:$BIT_PASSWORD@bitbucket.org/manojvarmapotthuri/frissly-backend.git ${BRANCH}
                            fi
                        '''
                    }
                }
            }
        }

        stage('Install Ingress Controller') {
            steps {
                script {
                    withKubeConfig(
                        caCertificate: '',
                        clusterName: 'eks-1',
                        contextName: '',
                        credentialsId: 'k8s_token',
                        namespace: 'frissly',
                        restrictKubeConfigAccess: false,
                        serverUrl: 'https://BE39E8F32738D1A0762681AC6A754500.gr7.us-east-2.eks.amazonaws.com'
                    ) {
                        sh '''
                            if ! kubectl get namespace ingress-nginx; then
                                kubectl create namespace ingress-nginx
                            else
                                echo "Namespace 'ingress-nginx' already exists."
                            fi

                            kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/cloud/deploy.yaml --namespace ingress-nginx
                        '''
                    }
                }
            }
        }

        stage('Install Calico Network Plugin') {
            steps {
                script {
                    withKubeConfig(
                        caCertificate: '',
                        clusterName: 'eks-1',
                        contextName: '',
                        credentialsId: 'k8s_token',
                        namespace: 'frissly',
                        restrictKubeConfigAccess: false,
                        serverUrl: 'https://BE39E8F32738D1A0762681AC6A754500.gr7.us-east-2.eks.amazonaws.com'
                    ) {
                        sh '''
                            kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml
                        '''
                    }
                }
            }
        }
        
        stage('Deploy to EKS') {
            steps {
                script {
                    withKubeConfig(
                        caCertificate: '',
                        clusterName: 'eks-1',
                        contextName: '',
                        credentialsId: 'k8s_token',
                        namespace: 'frissly',
                        restrictKubeConfigAccess: false,
                        serverUrl: 'https://BE39E8F32738D1A0762681AC6A754500.gr7.us-east-2.eks.amazonaws.com'
                    ) {
                        // Now apply the deployment and service in the webapps namespace
                        sh 'kubectl apply -f Kubernetes/pv.yml -n frissly'
                        sh 'kubectl apply -f Kubernetes/pvc.yml -n frissly'
                        sh 'kubectl apply -f ${DEPLOYMENT_FILE_PATH} -n frissly'
                        sh 'kubectl apply -f Kubernetes/service.yml -n frissly'
                        sh 'kubectl apply -f Kubernetes/autoscaling.yml -n frissly'
                        sleep 20
                    }
                }
            }
        }

        stage('Verify the Deployment') {
            steps {
                script {
                    withKubeConfig(
                        caCertificate: '',
                        clusterName: 'eks-1',
                        contextName: '',
                        credentialsId: 'k8s_token',
                        namespace: 'frissly',
                        restrictKubeConfigAccess: false,
                        serverUrl: 'https://BE39E8F32738D1A0762681AC6A754500.gr7.us-east-2.eks.amazonaws.com'
                    ) {
                        sh '''
                            kubectl get pods -n frissly
                            kubectl get svc -n frissly
                            kubectl get pv -n frissly
                            kubectl get pvc -n frissly
                            kubectl get hpa -n frissly
                        '''
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                def jobName = 'Frissly'
                def buildNumber = env.BUILD_NUMBER
                def pipelineStatus = currentBuild.result ?: 'UNKNOWN'
                def bannerColor = pipelineStatus.toUpperCase() == 'SUCCESS' ? 'green' : 'red'

                def body = """<html>
                                <body>
                                    <div style="border: 4px solid ${bannerColor}; padding: 10px;">
                                        <h2>${jobName} - Build ${buildNumber}</h2>
                                        <div style="background-color: ${bannerColor}; padding: 10px;">
                                            <h3 style="color: white;">Pipeline Status: ${pipelineStatus.toUpperCase()}</h3>
                                        </div>
                                        <p>Check the <a href="${BUILD_URL}">console output</a>.</p> 
                                    </div>
                                </body>
                            </html>"""

                emailext(
                    subject: "${jobName} - Build ${buildNumber} - ${pipelineStatus.toUpperCase()}",
                    body: body,
                    to: 'manojvarmapotthutri@gmail.com',
                    from: 'jenkins@example.com',
                    replyTo: 'jenkins@example.com',
                    attachmentsPattern: 'trivy.txt, fs-report.html',
                    mimeType: 'text/html'
                )
            }
        }
    }
}





# After complete to execute the above pipeline, In load balancer it will show only 1 and 2 service no problem it will work
-> kubectl get pods -n ingress-nginx
-> kubectl get svc -n ingress-nginx
-> It will give one Load Balancer URL, Copy that URL  (In load balancer it will show only 1 and 2 service no problem it will work)
-> Go to the Route 53, click host name [If your Load Balancer and Host name located at same account you will follow below steps]
-> click record, give name, click alais, choose load balancer, click load balancer and click create record

-> If Route53 and Load Balancer located at different account [You will below as like below]
-> click record, click CNAME, give Your load balancer URL at value place and click create record
-> After complete to create hostename, copy hostename
-> Come teminal 
-> sudo vi /etc/hosts
-> keep it like below 127.0.0.1 localhost
   a15259f57f9cf416a8d6f83dba83892e-1131911110.us-east-2.elb.amazonaws.com ingress.frissly.com
-> vi ingress.yml

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: swigy-frontend-ingress
  namespace: frissly
  annotations:
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/backend-protocol: HTTP
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}]'
spec:
  ingressClassName: alb
  rules:
    - host: ingress.frissly.com   # Replace this with your actual domain (CNAME should point to ALB)
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: swigy-frontend-service
                port:
                  number: 80


-> kubectl apply -f ingress.yml
-> kubectl get ingress


# If you not get address in ingress you will attach the below policy
aws iam attach-role-policy \
  --role-name eksctl-frissly-stag-eks-cluster-addon-iamserv-Role1-14mSFTmHuWs4 \
  --policy-arn arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess



# Github Repository Pipeline Script

pipeline {
    agent any

    tools {
        nodejs 'node22'
    }

    environment {
        DOCKER_IMAGE = "manoj3003/swigy:${BUILD_NUMBER}"
        GIT_REPO_NAME = "swiggy-nodejs-devops-project"
        GIT_USERNAME = "manoj7894"
        BRANCH = "main"
        DEPLOYMENT_FILE_PATH = "Kubernetes/deployment.yml"
        SCANNER_HOME = tool 'sonar-scanner'
    }

    stages {

        stage('Cleanup Workspace') {
            steps {
                script {
                    echo "Cleaning up the workspace..."
                    cleanWs()
                }
            }
        }

        stage('Remove All Previous Docker Images and Containers') {
            steps {
                sh 'docker rmi -f $(docker images -a -q) || true'
                sh 'docker volume prune -f || true'
                sh 'docker builder prune -f || true'
                sh 'docker network prune -f || true'
            }
        }

        stage('Cleanup Old Trivy Reports') {
            steps {
                sh '''
                    rm -f trivy.txt
                    rm -f fs-report.html
                '''
            }
        }

        stage('Get Code') {
            steps {
                git branch: "${BRANCH}", credentialsId: 'github', url: 'https://github.com/manoj7894/swiggy-nodejs-devops-project.git'
            }
        }

        stage('Install Package Dependencies') {
            steps {
                sh "npm install"
            }
        }

        stage('Check for Tests') {
            steps {
                script {
                    def testScriptExists = sh(script: "grep -q '\"test\":' package.json", returnStatus: true) == 0
                    env.TEST_SCRIPT_EXISTS = testScriptExists ? 'true' : 'false'
                }
            }
        }

        stage('Trivy Filesystem Scan') {
            steps {
                sh "trivy fs --format table -o fs-report.html ."
            }
        }

        // Optional: Uncomment if you want OWASP scanning
        // stage('OWASP Scan') {
        //     when {
        //         expression {
        //             fileExists('package.json')
        //         }
        //     }
        //     steps {
        //         dependencyCheck additionalArguments: '', odcInstallation: 'DP-Check'
        //         dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
        //     }
        // }

        stage('SonarQube') {
            steps {
                withSonarQubeEnv('Sonar_Install') {
                    sh '''
                        $SCANNER_HOME/bin/sonar-scanner \
                        -Dsonar.projectName=Validate \
                        -Dsonar.projectKey=Validate \
                        -Dsonar.host.url=http://18.216.183.138:9000
                    '''
                }
            }
        }

        stage('Stage V: QualityGates') {
            steps {
                echo "Running Quality Gates to verify the code quality"
                script {
                    timeout(time: 2, unit: 'MINUTES') {
                        def qg = waitForQualityGate()
                        if (qg.status != 'OK') {
                            error "Pipeline aborted due to quality gate failure: ${qg.status}"
                        }
                    }
                }
            }
        }

        stage('Build') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'Docker_id', toolName: 'Docker') {
                        sh "docker build -t ${DOCKER_IMAGE} ."
                    }
                }
            }
        }

        stage('Trivy Image Scan') {
            steps {
                sh "trivy image ${DOCKER_IMAGE} > trivy.txt"
            }
        }

        stage('Push') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'Docker_id', toolName: 'Docker') {
                        sh "docker push ${DOCKER_IMAGE}"
                    }
                }
            }
        }

        stage('Update Deployment File') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_TOKEN')]) {
                    script {
                        sh '''
                            git config user.email "jenkins@example.com"
                            git config user.name "Jenkins"
                        '''
                        sh 'git checkout "${BRANCH}"'
                        sh 'cat ${DEPLOYMENT_FILE_PATH}'
                        sh '''
                            sed -i "s|image: manoj3003/swigy:[^[:space:]]*|image: ${DOCKER_IMAGE}|g" ${DEPLOYMENT_FILE_PATH}
                        '''
                        sh '''
                            if git diff --quiet; then
                                echo "No changes detected in ${DEPLOYMENT_FILE_PATH}"
                            else
                                git add ${DEPLOYMENT_FILE_PATH}
                                git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                                git push -f https://${GIT_USER}:${GIT_TOKEN}@github.com/${GIT_USER}/${GIT_REPO_NAME}.git ${BRANCH}
                            fi
                        '''
                    }
                }
            }
        }

        stage('Install Ingress Controller') {
            steps {
                script {
                    withKubeConfig(
                        caCertificate: '',
                        clusterName: 'eks-1',
                        contextName: '',
                        credentialsId: 'k8s_token',
                        namespace: 'frissly',
                        restrictKubeConfigAccess: false,
                        serverUrl: 'https://893E5B8F2690F81B3FF2A73EE369E17B.yl4.us-east-2.eks.amazonaws.com'
                    ) {
                        sh '''
                            if ! kubectl get namespace ingress-nginx; then
                                kubectl create namespace ingress-nginx
                            else
                                echo "Namespace 'ingress-nginx' already exists."
                            fi

                            kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/cloud/deploy.yaml --namespace ingress-nginx
                        '''
                    }
                }
            }
        }

        stage('Install Calico Network Plugin') {
            steps {
                script {
                    withKubeConfig(
                        caCertificate: '',
                        clusterName: 'eks-1',
                        contextName: '',
                        credentialsId: 'k8s_token',
                        namespace: 'frissly',
                        restrictKubeConfigAccess: false,
                        serverUrl: 'https://893E5B8F2690F81B3FF2A73EE369E17B.yl4.us-east-2.eks.amazonaws.com'
                    ) {
                        sh 'kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml'
                    }
                }
            }
        }

        stage('Deploy to EKS') {
            steps {
                script {
                    withKubeConfig(
                        caCertificate: '',
                        clusterName: 'eks-1',
                        contextName: '',
                        credentialsId: 'k8s_token',
                        namespace: 'frissly',
                        restrictKubeConfigAccess: false,
                        serverUrl: 'https://893E5B8F2690F81B3FF2A73EE369E17B.yl4.us-east-2.eks.amazonaws.com'
                    ) {
                        sh 'kubectl apply -f Kubernetes/pv.yml -n frissly'
                        sh 'kubectl apply -f Kubernetes/pvc.yml -n frissly'
                        sh 'kubectl apply -f ${DEPLOYMENT_FILE_PATH} -n frissly'
                        sh 'kubectl apply -f Kubernetes/service.yml -n frissly'
                        sh 'kubectl apply -f Kubernetes/autoscaling.yml -n frissly'
                        sleep 20
                    }
                }
            }
        }

        stage('Verify the Deployment') {
            steps {
                script {
                    withKubeConfig(
                        caCertificate: '',
                        clusterName: 'eks-1',
                        contextName: '',
                        credentialsId: 'k8s_token',
                        namespace: 'frissly',
                        restrictKubeConfigAccess: false,
                        serverUrl: 'https://893E5B8F2690F81B3FF2A73EE369E17B.yl4.us-east-2.eks.amazonaws.com'
                    ) {
                        sh '''
                            kubectl get pods -n frissly
                            kubectl get svc -n frissly
                            kubectl get pv -n frissly
                            kubectl get pvc -n frissly
                            kubectl get hpa -n frissly
                        '''
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                def jobName = 'Frissly'
                def buildNumber = env.BUILD_NUMBER
                def pipelineStatus = currentBuild.result ?: 'SUCCESS'
                def bannerColor = pipelineStatus.toUpperCase() == 'SUCCESS' ? 'green' : 'red'

                def body = """<html>
                                <body>
                                    <div style="border: 4px solid ${bannerColor}; padding: 10px;">
                                        <h2>${jobName} - Build ${buildNumber}</h2>
                                        <div style="background-color: ${bannerColor}; padding: 10px;">
                                            <h3 style="color: white;">Pipeline Status: ${pipelineStatus.toUpperCase()}</h3>
                                        </div>
                                        <p>Check the <a href="${BUILD_URL}">console output</a>.</p> 
                                    </div>
                                </body>
                            </html>"""

                emailext(
                    subject: "${jobName} - Build ${buildNumber} - ${pipelineStatus.toUpperCase()}",
                    body: body,
                    to: 'manojvarmapotthutri@gmail.com',
                    from: 'jenkins@example.com',
                    replyTo: 'jenkins@example.com',
                    attachmentsPattern: 'trivy.txt, fs-report.html',
                    mimeType: 'text/html'
                )
            }
        }
    }
}
