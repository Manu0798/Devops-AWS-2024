# How to create autoscaling 

provider "aws" {
  region     = var.region
  access_key = var.access_key
  secret_key = var.secret_key
}

# To Create VPC
resource "aws_vpc" "vpc" {
  cidr_block       = "10.0.0.0/16"
  instance_tenancy = "default"

  tags = {
    Name = "vpc01"
  }
}

# To Create Public Subnet
resource "aws_subnet" "public" {
  vpc_id                  = aws_vpc.vpc.id # Replace with your VPC ID
  cidr_block              = "10.0.0.0/24"  # Replace with your desired CIDR block
  availability_zone       = "ap-south-1a"  # Replace with your desired Availability Zone
  map_public_ip_on_launch = true           # Enable auto-assign public IP

  # Optional: Assign tags to your subnets
  tags = {
    Name = "Public Subnet"
  }
}

# To Create Private Subnet
resource "aws_subnet" "private" {
  vpc_id                  = aws_vpc.vpc.id # Replace with your VPC ID
  cidr_block              = "10.0.1.0/24"  # Replace with your desired CIDR block
  availability_zone       = "ap-south-1b"  # Replace with your desired Availability Zone
  map_public_ip_on_launch = true           # Enable auto-assign public IP

  # Optional: Assign tags to your subnets
  tags = {
    Name = "Private Subnet"
  }
}

# To create the Internet gateway
resource "aws_internet_gateway" "igw" {
  vpc_id = aws_vpc.vpc.id

  # Optional: Assign tags to your Internet Gateway
  tags = {
    Name = "My Internet Gateway"
  }
}

# To create Routetable-1
resource "aws_route_table" "rt1" {
  vpc_id = aws_vpc.vpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.igw.id
  }

  # Optional: Assign tags to your route table
  tags = {
    Name = "MyRouteTable"
  }
}

# To create Routetable-2
resource "aws_route_table" "rt2" {
  vpc_id = aws_vpc.vpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.igw.id
  }

  # Optional: Assign tags to your route table
  tags = {
    Name = "MyRouteTable2"
  }
}

# To attch Publicsubnet and routetable-1
resource "aws_route_table_association" "subnet1_association" {
  subnet_id      = aws_subnet.public.id
  route_table_id = aws_route_table.rt1.id
}

# To attch Privatesubnet and routetable-2
resource "aws_route_table_association" "subnet2_association" {
  subnet_id      = aws_subnet.private.id
  route_table_id = aws_route_table.rt2.id
}

# Create a security group
resource "aws_security_group" "example_security_group" {
  name_prefix = "example-security-group"
  description = "Example security group"
  vpc_id      = aws_vpc.vpc.id

  # Define your security group rules as needed
  # For example, allow SSH and HTTP traffic
  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  # outgoing traffic

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}


resource "aws_lb" "example" {
  name                       = "example-alb"
  load_balancer_type         = "application"
  internal                   = false                                         # Set to true for an internal ALB
  subnets                    = [aws_subnet.public.id, aws_subnet.private.id] # Replace with your subnet IDs
  enable_deletion_protection = false
  security_groups            = [aws_security_group.example_security_group.id]

}


resource "aws_lb_target_group" "example_target_group" {
  name     = "example-target-group"
  port     = 80
  protocol = "HTTP"
  vpc_id   = aws_vpc.vpc.id # Replace with your VPC ID

  health_check {
    path                = "/" # Modify this to match your application's health check path
    protocol            = "HTTP"
    port                = 80
    interval            = 30
    timeout             = 5
    healthy_threshold   = 2
    unhealthy_threshold = 2
  }
}

resource "aws_lb_listener" "example" {
  load_balancer_arn = aws_lb.example.arn
  port              = 80
  protocol          = "HTTP"

  default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.example_target_group.arn
  }
}

resource "aws_iam_role" "example" {
  name = "example-role"
  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Action = "sts:AssumeRole",
        Effect = "Allow",
        Principal = {
          Service = "ec2.amazonaws.com"
        }
      }
    ]
  })
}

resource "aws_iam_instance_profile" "example" {
  name = "example-instance-profile"
  role = aws_iam_role.example.name
}

resource "aws_launch_template" "example" {
  name_prefix            = "template"
  image_id               = var.ami
  instance_type          = var.instance_type
  key_name               = var.key_name
  vpc_security_group_ids = [aws_security_group.example_security_group.id]
  user_data              = filebase64("/home/ec2-user/file.sh")

  iam_instance_profile {
    name = aws_iam_instance_profile.example.name
  }

  block_device_mappings {
    device_name = "/dev/xvda"
    ebs {
      volume_size = 8
      volume_type = "gp2"
    }
  }

  tag_specifications {
    resource_type = "instance"
    tags = {
      Name = "ec2-instance"
    }
  }
}

resource "aws_autoscaling_group" "example" {
  vpc_zone_identifier = [aws_subnet.public.id, aws_subnet.private.id]
  desired_capacity    = 2
  max_size            = 3
  min_size            = 1
  health_check_grace_period = 300
  health_check_type         = "ELB"
  target_group_arns   = [aws_lb_target_group.example_target_group.arn]

  launch_template {
    id      = aws_launch_template.example.id
    version = "$Latest"
  }

  tag {
    key                 = "Scale"
    value               = true
    propagate_at_launch = true
  }
}

resource "aws_autoscaling_attachment" "example_attachment" {
  autoscaling_group_name = aws_autoscaling_group.example.name
  lb_target_group_arn    = aws_lb_target_group.example_target_group.arn
}